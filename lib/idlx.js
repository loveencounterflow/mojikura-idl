// Generated by CoffeeScript 1.10.0
(function() {
  var CND, IDL, IDLX, MKNCR, O, alert, badge, debug, echo, help, info, log, rpr, urge, warn, whisper;

  CND = require('cnd');

  rpr = CND.rpr;

  badge = 'MOJIKURA-IDL';

  badge = 'MOJIKURA-IDL/IDLX';

  log = CND.get_logger('plain', badge);

  info = CND.get_logger('info', badge);

  whisper = CND.get_logger('whisper', badge);

  alert = CND.get_logger('alert', badge);

  debug = CND.get_logger('debug', badge);

  warn = CND.get_logger('warn', badge);

  help = CND.get_logger('help', badge);

  urge = CND.get_logger('urge', badge);

  echo = CND.echo.bind(CND);

  MKNCR = require('mingkwai-ncr');

  O = require('./options');

  IDL = require('./idl');

  this.grammar = O.idlx;

  this._symbol_is_solitaire = function(me, symbol) {
    return symbol in this.grammar.solitaires;
  };

  this._symbol_is_proxy = function(me, symbol) {
    return symbol in this.grammar.proxies;
  };

  this._symbol_is_lbracket = function(me, symbol) {
    var ref;
    return ((ref = this.grammar.brackets[symbol]) != null ? ref.name : void 0) === 'lbracket';
  };

  this._symbol_is_rbracket = function(me, symbol) {
    var ref;
    return ((ref = this.grammar.brackets[symbol]) != null ? ref.name : void 0) === 'rbracket';
  };

  this._type_of_symbol = function(me, symbol) {
    var R;
    R = IDL._type_of_symbol.call(IDLX, me, symbol);
    if (this._symbol_is_solitaire(me, symbol)) {
      return 'solitaire';
    }
    if (this._symbol_is_proxy(me, symbol)) {
      return 'proxy';
    }
    if (this._symbol_is_lbracket(me, symbol)) {
      return 'lbracket';
    }
    if (this._symbol_is_rbracket(me, symbol)) {
      return 'rbracket';
    }
    return R;
  };

  this._token_is_rbracket = function(x) {
    return (this._isa_token(x)) && x.t === 'rbracket';
  };

  this._token_is_constituent = function(x) {
    var ref;
    return (this._isa_token(x)) && ((ref = x.t) === 'component' || ref === 'proxy');
  };

  this._get_next_token = function(me, mode) {
    var R, tokens_txt;
    R = me.tokens[me.idx];
    if (R == null) {
      tokens_txt = this._rpr_tokens(me, me.idx - 1);
      throw new Error("syntax error: premature end of source in " + tokens_txt + ")");
    }
    if (mode !== 'peek') {
      this._advance(me);
    }
    return R;
  };

  this._peek_next_token = function(me) {
    return this._get_next_token(me, 'peek');
  };

  this._advance = function(me) {
    return me.idx += +1;
  };

  this._try_to_advance = function(me) {
    if (me.idx < me.tokens.length - 1) {
      return me.idx += +1;
    }
  };

  this._parse_tree = function(me, R) {
    var advance, arity, count, i, next_token, ref, target, token, tokens_txt, type;
    if (R == null) {
      R = null;
    }
    advance = false;
    while (true) {
      token = this._get_next_token(me);
      target = null;
      arity = null;
      switch (type = token.t) {
        case 'lbracket':
          advance = true;
          continue;
        case 'rbracket':
          tokens_txt = this._rpr_tokens(me, me.idx - 1);
          throw new Error("syntax error: unexpected right bracket " + tokens_txt);
          break;
        case 'operator':
          if (advance) {
            if (!(token.a > 1)) {
              tokens_txt = this._rpr_tokens(me, me.idx - 1);
              throw new Error("syntax error: cannot bracket unary operator " + tokens_txt);
            }
            target = [token];
            while (true) {
              next_token = this._peek_next_token(me);
              if (this._token_is_rbracket(next_token)) {
                if (!(target.length - 1 > token.a)) {
                  tokens_txt = this._rpr_tokens(me);
                  throw new Error("syntax error: too few constituents in " + tokens_txt);
                }
                this._advance(me);
                break;
              } else if (this._token_is_constituent(next_token)) {
                target.push(next_token);
                this._advance(me);
              } else {
                target.push(this._parse_tree(me));
              }
            }
          } else {
            arity = token.a;
            target = [token];
            for (count = i = 1, ref = arity; i <= ref; count = i += +1) {
              this._parse_tree(me, target);
            }
          }
          if (R != null) {
            R.push(target);
          } else {
            R = target;
          }
          break;
        case 'component':
        case 'solitaire':
        case 'proxy':
          if ((type === 'solitaire') && (me.idx !== 1)) {
            tokens_txt = this._rpr_tokens(me, me.idx - 1);
            throw new Error("syntax error: cannot have a solitaire here " + tokens_txt);
          }
          if (R != null) {
            R.push(token);
          } else {
            R = token;
          }
          break;
        default:
          tokens_txt = this._rpr_tokens(me, me.idx - 1);
          throw new Error("syntax error: illegal token " + (rpr(token.s)) + " (type " + (rpr(type)) + ") in " + tokens_txt);
      }
      break;
    }
    return R;
  };


  /* Poor Man's MultiMix: */

  module.exports = IDLX = Object.assign(CND.deep_copy(IDL), this);

}).call(this);

//# sourceMappingURL=idlx.js.map
