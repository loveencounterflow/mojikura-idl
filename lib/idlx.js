// Generated by CoffeeScript 1.10.0
(function() {
  var CND, IDL, IDLX, MKNCR, O, alert, badge, debug, echo, help, info, log, rpr, urge, warn, whisper;

  CND = require('cnd');

  rpr = CND.rpr;

  badge = 'MOJIKURA-IDL';

  badge = 'MOJIKURA-IDL/IDLX';

  log = CND.get_logger('plain', badge);

  info = CND.get_logger('info', badge);

  whisper = CND.get_logger('whisper', badge);

  alert = CND.get_logger('alert', badge);

  debug = CND.get_logger('debug', badge);

  warn = CND.get_logger('warn', badge);

  help = CND.get_logger('help', badge);

  urge = CND.get_logger('urge', badge);

  echo = CND.echo.bind(CND);

  MKNCR = require('mingkwai-ncr');

  O = require('./options');

  IDL = require('./idl');

  this.grammar = O.idlx;

  this._symbol_is_solitaire = function(me, symbol) {
    return symbol in this.grammar.solitaires;
  };

  this._symbol_is_proxy = function(me, symbol) {
    return symbol in this.grammar.proxies;
  };

  this._symbol_is_lbracket = function(me, symbol) {
    var ref;
    return ((ref = this.grammar.brackets[symbol]) != null ? ref.name : void 0) === 'lbracket';
  };

  this._symbol_is_rbracket = function(me, symbol) {
    var ref;
    return ((ref = this.grammar.brackets[symbol]) != null ? ref.name : void 0) === 'rbracket';
  };

  this._type_of_symbol = function(me, symbol) {
    var R;
    R = IDL._type_of_symbol.call(IDLX, me, symbol);
    if (this._symbol_is_solitaire(me, symbol)) {
      return 'solitaire';
    }
    if (this._symbol_is_proxy(me, symbol)) {
      return 'proxy';
    }
    if (this._symbol_is_lbracket(me, symbol)) {
      return 'lbracket';
    }
    if (this._symbol_is_rbracket(me, symbol)) {
      return 'rbracket';
    }
    return R;
  };

  this._isa_rbracket = function(x) {
    return (this._isa_token(x)) && x.name === 'rbracket';
  };

  this._get_next_token = function(me) {
    var R, tokens_txt;
    R = me.tokens[me.idx];
    if (R == null) {
      tokens_txt = this._rpr_tokens(me, me.idx - 1);
      throw new Error("syntax error: premature end of source in " + tokens_txt + ")");
    }
    me.idx += +1;
    return R;
  };

  this._parse_tree = function(me, R, advance) {
    var arity, count, expression, i, ref, target, token, tokens_txt, type;
    if (R == null) {
      R = null;
    }
    if (advance == null) {
      advance = false;
    }
    token = this._get_next_token(me);
    target = null;
    arity = null;
    switch (type = token.t) {
      case 'lbracket':
        expression = this._parse_tree(me, null, true);
        if (R != null) {
          R.push(expression);
        } else {
          R = expression;
        }
        break;
      case 'rbracket':
        R = token;
        break;
      case 'operator':
        if (advance) {
          throw new Error("MEH");
        } else {
          arity = token.a;
          target = [token];
          for (count = i = 1, ref = arity; i <= ref; count = i += +1) {
            this._parse_tree(me, target);
          }
        }
        if (R != null) {
          R.push(target);
        } else {
          R = target;
        }
        break;
      case 'component':
      case 'solitaire':
      case 'proxy':
        if (R != null) {
          R.push(token);
        } else {
          R = token;
        }
        break;
      default:
        tokens_txt = this._rpr_tokens(me, me.idx - 1);
        throw new Error("syntax error: illegal token " + (rpr(token.s)) + " (type " + (rpr(type)) + ") in " + tokens_txt);
    }
    return R;
  };


  /* Poor Man's MultiMix: */

  module.exports = IDLX = Object.assign(CND.deep_copy(IDL), this);

}).call(this);

//# sourceMappingURL=idlx.js.map
