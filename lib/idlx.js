// Generated by CoffeeScript 1.12.4
(function() {
  var CND, IDL, IDLX, O, alert, badge, debug, echo, help, info, log, rpr, urge, warn, whisper;

  CND = require('cnd');

  rpr = CND.rpr;

  badge = 'MOJIKURA-IDL';

  badge = 'MOJIKURA-IDL/IDLX';

  log = CND.get_logger('plain', badge);

  info = CND.get_logger('info', badge);

  whisper = CND.get_logger('whisper', badge);

  alert = CND.get_logger('alert', badge);

  debug = CND.get_logger('debug', badge);

  warn = CND.get_logger('warn', badge);

  help = CND.get_logger('help', badge);

  urge = CND.get_logger('urge', badge);

  echo = CND.echo.bind(CND);

  O = require('./options');

  IDL = require('./idl');

  this._parser_settings = O.idlx;

  this._lexeme_is_solitaire = function(me, lexeme) {
    return lexeme in me.settings.solitaires;
  };

  this._lexeme_is_proxy = function(me, lexeme) {
    return lexeme in me.settings.proxies;
  };

  this._lexeme_is_lbracket = function(me, lexeme) {
    var ref;
    return ((ref = me.settings.brackets[lexeme]) != null ? ref.name : void 0) === 'lbracket';
  };

  this._lexeme_is_rbracket = function(me, lexeme) {
    var ref;
    return ((ref = me.settings.brackets[lexeme]) != null ? ref.name : void 0) === 'rbracket';
  };

  this._type_of_lexeme = function(me, lexeme) {
    var R;
    R = IDL._type_of_lexeme.call(IDLX, me, lexeme);
    if (this._lexeme_is_solitaire(me, lexeme)) {
      return 'solitaire';
    }
    if (this._lexeme_is_proxy(me, lexeme)) {
      return 'proxy';
    }
    if (this._lexeme_is_lbracket(me, lexeme)) {
      return 'lbracket';
    }
    if (this._lexeme_is_rbracket(me, lexeme)) {
      return 'rbracket';
    }
    return R;
  };

  this._token_is_rbracket = function(me, x) {
    return (this._isa_token(me, x)) && x.t === 'rbracket';
  };

  this._token_is_constituent = function(me, x) {
    var ref;
    return (this._isa_token(me, x)) && ((ref = x.t) === 'component' || ref === 'proxy');
  };

  this._get_next_token = function(me, mode) {
    var R;
    R = me.tokenlist[me.idx];
    if (R == null) {
      this._err(me, me.idx - 1, "IDLX: premature end of source");
    }
    if (mode !== 'peek') {
      this._advance(me);
    }
    return R;
  };

  this._peek_next_token = function(me) {
    return this._get_next_token(me, 'peek');
  };

  this._advance = function(me) {
    return me.idx += +1;
  };

  this._try_to_advance = function(me) {
    if (me.idx < me.tokenlist.length - 1) {
      return me.idx += +1;
    }
  };

  this._build_tokentree = function(me, R) {
    var advance, arity, count, i, next_token, ref, target, token, type;
    if (R == null) {
      R = null;
    }
    advance = false;
    while (true) {
      token = this._get_next_token(me);
      target = null;
      arity = null;
      switch (type = token.t) {
        case 'lbracket':
          advance = true;
          continue;
        case 'rbracket':
          this._err(me, me.idx - 1, "IDLX: unexpected right bracket");
          break;
        case 'operator':
          if (advance) {
            if (!(token.a > 1)) {
              this._err(me, me.idx - 1, "IDLX: cannot bracket unary operator");
            }
            target = [token];
            while (true) {
              next_token = this._peek_next_token(me);
              if (this._token_is_rbracket(me, next_token)) {
                if (!(target.length - 1 > token.a)) {
                  this._err(me, me.idx, "IDLX: too few constituents");
                }
                this._advance(me);
                break;
              } else if (this._token_is_constituent(me, next_token)) {
                target.push(next_token);
                this._advance(me);
              } else {
                target.push(this._build_tokentree(me));
              }
            }
          } else {
            arity = token.a;
            target = [token];
            for (count = i = 1, ref = arity; i <= ref; count = i += +1) {
              this._build_tokentree(me, target);
            }
          }
          if (R != null) {
            R.push(target);
          } else {
            R = target;
          }
          break;
        case 'component':
        case 'solitaire':
        case 'proxy':
          if ((type === 'solitaire') && ((me.idx !== 1) || (me.tokenlist.length > 1))) {
            this._err(me, me.idx - 1, "IDLX: cannot have a solitaire here");
          }
          if (R != null) {
            R.push(token);
          } else {
            R = token;
          }
          break;
        default:
          this._err(me, me.idx - 1, "IDLX: illegal token " + (rpr(token.s)) + " (type " + (rpr(type)) + ")");
      }
      break;
    }
    return R;
  };

  this.formula_may_be_suboptimal = function(_, formula) {
    var type;
    if ((type = CND.type_of(formula)) !== 'text') {
      throw new Error("expected a text, got a " + type);
    }
    return this._get_treeshaker_litmus().test(formula);
  };

  this.shake_tree = function(ctx) {

    /* TAINT poor man's deep_copy: */
    ctx = JSON.parse(JSON.stringify(ctx));
    delete ctx.tokenlist;
    delete ctx.diagram;
    this._shake_tree(ctx.tokentree);
    this._get_diagram(ctx);
    this._get_formula(ctx, 'uchr');
    return this.parse(ctx.formula_uchr);
  };

  this._shake_tree = function(tree) {
    var argument_idx, operator_symbol, operator_token, ref, sub_operator_symbol, sub_operator_token, sub_tree, token_type, type;
    if ((type = CND.type_of(tree)) !== 'list') {
      throw new Error("expected a list, got a " + type);
    }
    operator_token = tree[0];
    if ((type = CND.type_of(operator_token)) !== 'MOJIKURA-IDL/token') {
      throw new Error("expected a MOJIKURA-IDL/token, got a " + type);
    }
    if ((type = operator_token.t) !== 'operator') {
      throw new Error("expected an operator, got a " + type);
    }
    operator_symbol = operator_token.s;
    argument_idx = 0;
    while (true) {
      argument_idx += +1;
      if (argument_idx > tree.length - 1) {
        break;
      }
      sub_tree = tree[argument_idx];
      if ((token_type = CND.type_of(sub_tree)) !== 'list') {
        continue;
      }
      sub_operator_token = sub_tree[0];
      if ((type = CND.type_of(sub_operator_token)) !== 'MOJIKURA-IDL/token') {
        throw new Error("expected a MOJIKURA-IDL/token, got a " + type);
      }
      if ((type = sub_operator_token.t) !== 'operator') {
        throw new Error("expected an operator, got a " + type);
      }
      sub_operator_symbol = sub_operator_token.s;
      if (operator_symbol === sub_operator_symbol) {
        [].splice.apply(tree, [argument_idx, argument_idx - argument_idx + 1].concat(ref = sub_tree.slice(1))), ref;
        argument_idx += -1;
      } else {
        this._shake_tree(sub_tree);
      }
    }
    return null;
  };

  this._get_treeshaker_litmus = function() {

    /* When `@_get_treeshaker_litmus.pattern` matches a formula, it *may* be non-optimal; if the pattern
    does *not* match a formula, there are certainly no opportunities for optimization. The pattern works by
    trying to match sequences like `/...|(?:O[^MNPQ]*O)|(?:P[^MNOQ]*P)|.../`, where `MNOPQ` are the binary
    operators.
     */
    var R, arity, binary_operators, i, j, len, len1, operator, pattern, ref, sub_operator, sub_pattern, symbol;
    if ((R = this._get_treeshaker_litmus.pattern) != null) {
      return R;
    }
    binary_operators = [];
    ref = this._parser_settings.operators;
    for (symbol in ref) {
      arity = ref[symbol].arity;
      if (arity === 2) {
        binary_operators.push(symbol);
      }
    }
    pattern = [];
    for (i = 0, len = binary_operators.length; i < len; i++) {
      operator = binary_operators[i];
      sub_pattern = [];
      sub_pattern.push('[^');
      for (j = 0, len1 = binary_operators.length; j < len1; j++) {
        sub_operator = binary_operators[j];
        if (sub_operator === operator) {
          continue;
        }
        sub_pattern.push(sub_operator);
      }
      sub_pattern.push(']*');
      pattern.push('(?:' + operator + (sub_pattern.join('')) + operator + ')');
    }
    return this._get_treeshaker_litmus.pattern = new RegExp(pattern.join('|'));
  };

  this._get_treeshaker_litmus.pattern = null;


  /* Poor Man's MultiMix: */

  module.exports = IDLX = Object.assign(CND.deep_copy(IDL), this);

}).call(this);

//# sourceMappingURL=idlx.js.map
