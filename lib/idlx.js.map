{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/idlx.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "# Generated automatically by nearley, version 2.20.1\n# http://github.com/Hardmath123/nearley\ndo ->\n  id = (d) -> d[0]\n\n  \n  CND                       = require 'cnd'\n  rpr                       = CND.rpr\n  badge                     = 'MOJIKURA-IDL/IDLX'\n  log                       = CND.get_logger 'plain',     badge\n  debug                     = CND.get_logger 'debug',     badge\n  info                      = CND.get_logger 'info',      badge\n  help                      = CND.get_logger 'help',      badge\n  { isa\n    type_of\n    validate\n    equals   }              = require './types'\n  \n  # #-----------------------------------------------------------------------------------------------------------\n  # O =\n  #   silent:     no\n  #   unpack:     yes\n  #   unbracket:  yes\n  #   unnest:     yes\n  \n  #-----------------------------------------------------------------------------------------------------------\n  O =\n    silent:     yes\n    unpack:     yes\n    unbracket:  yes\n    unnest:     yes\n  \n  #-----------------------------------------------------------------------------------------------------------\n  before_after = ( before, after ) ->\n    return ( CND.grey '\\n<- ' ) + ( CND.orange rpr before ) + ( CND.grey '\\n-> ' ) + ( CND.lime rpr after )\n  \n  #-----------------------------------------------------------------------------------------------------------\n  splice_into = ( target, idx ) ->\n    unless ( type = type_of ( sub_data = target[ idx ] ) ) is 'list'\n      throw new Error \"expected a list, got a #{type} as element 2 of #{rpr target}\"\n    target.splice idx, 1, sub_data...\n    return target\n  \n  #-----------------------------------------------------------------------------------------------------------\n  $unpack = ( label, keys... ) ->\n    return ( data, loc, reject ) ->\n      if O.unpack\n        R = data\n        for key in keys\n          break if isa.text R\n          R = R[ key ]\n      else\n        R = Object.assign [], data\n      unless O.silent\n        R.label = label\n        info '$unpack', label, before_after data, R\n      return R\n  \n  #-----------------------------------------------------------------------------------------------------------\n  $unbracket = ( label, keys... ) ->\n    unpack = $unpack label, keys...\n    return ( data, loc, reject ) ->\n      R = unpack data, loc, reject\n      if O.unbracket\n        R = R[ 1 ... R.length - 1 ]\n        splice_into R, 1\n      unless O.silent\n        info '$unbracket', before_after data, R\n      return R\n  \n  #-----------------------------------------------------------------------------------------------------------\n  $unnest = ( label, keys... ) ->\n    unpack = $unpack label, keys...\n    return ( data, loc, reject ) ->\n      R = unpack data, loc, reject\n      if O.unnest\n        splice_into R, 2\n      unless O.silent\n        info '$unnest', before_after data, R\n      return R\n  \n  \n  grammar = {\n    Lexer: undefined,\n    ParserRules: [\n          {\"name\": \"start$subexpression$1\", \"symbols\": [\"+solitaire+\"]},\n          {\"name\": \"start$subexpression$1\", \"symbols\": [\"term\"]},\n          {\"name\": \"start\", \"symbols\": [\"start$subexpression$1\"], \"postprocess\": $unpack    'start',      0, 0},\n          {\"name\": \"expr$subexpression$1\", \"symbols\": [\"term\"]},\n          {\"name\": \"expr$subexpression$1\", \"symbols\": [\"component\"]},\n          {\"name\": \"expr\", \"symbols\": [\"expr$subexpression$1\"], \"postprocess\": $unpack    'expr',    0, 0, 0},\n          {\"name\": \"expr3+$subexpression$1$ebnf$1\", \"symbols\": [\"expr\"]},\n          {\"name\": \"expr3+$subexpression$1$ebnf$1\", \"symbols\": [\"expr3+$subexpression$1$ebnf$1\", \"expr\"], \"postprocess\": (d) -> d[0].concat([d[1]])},\n          {\"name\": \"expr3+$subexpression$1\", \"symbols\": [\"expr\", \"expr\", \"expr3+$subexpression$1$ebnf$1\"]},\n          {\"name\": \"expr3+\", \"symbols\": [\"expr3+$subexpression$1\"], \"postprocess\": $unnest    'expr3+',        0},\n          {\"name\": \"term$subexpression$1\", \"symbols\": [\"unary\"]},\n          {\"name\": \"term$subexpression$1\", \"symbols\": [\"binary\"]},\n          {\"name\": \"term$subexpression$1\", \"symbols\": [\"+bracket+ed\"]},\n          {\"name\": \"term\", \"symbols\": [\"term$subexpression$1\"], \"postprocess\": $unpack    'term',          0},\n          {\"name\": \"unary$subexpression$1\", \"symbols\": [\"+unary_operator+\", \"expr\"]},\n          {\"name\": \"unary\", \"symbols\": [\"unary$subexpression$1\"], \"postprocess\": $unpack    'unary',         0},\n          {\"name\": \"binary$subexpression$1\", \"symbols\": [\"+binary_operator+\", \"expr\", \"expr\"]},\n          {\"name\": \"binary\", \"symbols\": [\"binary$subexpression$1\"], \"postprocess\": $unpack    'binary',        0},\n          {\"name\": \"+bracket+ed$subexpression$1\", \"symbols\": [\"lbracket\", \"+binary_operator+\", \"expr3+\", \"rbracket\"]},\n          {\"name\": \"+bracket+ed\", \"symbols\": [\"+bracket+ed$subexpression$1\"], \"postprocess\": $unbracket '+bracket+ed',   0},\n          {\"name\": \"component\", \"symbols\": [\"+proxy+\"]},\n          {\"name\": \"component\", \"symbols\": [/./], \"postprocess\": \n              ( data, loc, reject ) ->\n                [ { value: R, }, ] = data\n                return reject if /^\\s+$/.test R\n                # return reject if /^[≈<>?↻↔↕⿰⿱⿴⿵⿶⿷⿸⿹⿺⿻◰()∅●▽ⓧⓨⓩ〓§]$/.test R\n                return reject if /^[≈<>?↻↔↕⿰⿱⿴⿵⿶⿷⿸⿹⿺⿻◰()∅●▽〓§]$/.test R\n                unless O.silent\n                  info 'component', before_after data, R\n                return R\n               },\n          {\"name\": \"+unary_operator+$subexpression$1\", \"symbols\": [\"similar\"]},\n          {\"name\": \"+unary_operator+$subexpression$1\", \"symbols\": [\"heavy\"]},\n          {\"name\": \"+unary_operator+$subexpression$1\", \"symbols\": [\"light\"]},\n          {\"name\": \"+unary_operator+$subexpression$1\", \"symbols\": [\"doubt\"]},\n          {\"name\": \"+unary_operator+$subexpression$1\", \"symbols\": [\"upsidedown\"]},\n          {\"name\": \"+unary_operator+$subexpression$1\", \"symbols\": [\"mirror\"]},\n          {\"name\": \"+unary_operator+$subexpression$1\", \"symbols\": [\"flip\"]},\n          {\"name\": \"+unary_operator+\", \"symbols\": [\"+unary_operator+$subexpression$1\"], \"postprocess\": $unpack '+unary_operator+',  0, 0},\n          {\"name\": \"+binary_operator+$subexpression$1\", \"symbols\": [\"leftright\"]},\n          {\"name\": \"+binary_operator+$subexpression$1\", \"symbols\": [\"topdown\"]},\n          {\"name\": \"+binary_operator+$subexpression$1\", \"symbols\": [\"surround\"]},\n          {\"name\": \"+binary_operator+$subexpression$1\", \"symbols\": [\"cap\"]},\n          {\"name\": \"+binary_operator+$subexpression$1\", \"symbols\": [\"cup\"]},\n          {\"name\": \"+binary_operator+$subexpression$1\", \"symbols\": [\"leftembrace\"]},\n          {\"name\": \"+binary_operator+$subexpression$1\", \"symbols\": [\"topleft\"]},\n          {\"name\": \"+binary_operator+$subexpression$1\", \"symbols\": [\"topright\"]},\n          {\"name\": \"+binary_operator+$subexpression$1\", \"symbols\": [\"leftbottom\"]},\n          {\"name\": \"+binary_operator+$subexpression$1\", \"symbols\": [\"interlace\"]},\n          {\"name\": \"+binary_operator+$subexpression$1\", \"symbols\": [\"topleftcorner\"]},\n          {\"name\": \"+binary_operator+\", \"symbols\": [\"+binary_operator+$subexpression$1\"], \"postprocess\": $unpack '+binary_operator+',  0, 0},\n          {\"name\": \"+solitaire+$subexpression$1\", \"symbols\": [\"nosuchformula\"]},\n          {\"name\": \"+solitaire+$subexpression$1\", \"symbols\": [\"terminator\"]},\n          {\"name\": \"+solitaire+$subexpression$1\", \"symbols\": [\"inhibitor\"]},\n          {\"name\": \"+solitaire+\", \"symbols\": [\"+solitaire+$subexpression$1\"], \"postprocess\": $unpack '+solitaire+', 0},\n          {\"name\": \"+proxy+$subexpression$1\", \"symbols\": [\"getamark\"]},\n          {\"name\": \"+proxy+$subexpression$1\", \"symbols\": [\"curl\"]},\n          {\"name\": \"+proxy+\", \"symbols\": [\"+proxy+$subexpression$1\"], \"postprocess\": $unpack '+proxy+', 0, 0},\n          {\"name\": \"similar\", \"symbols\": [{\"literal\":\"≈\"}], \"postprocess\": $unpack 'similar',        0, 'value',},\n          {\"name\": \"heavy\", \"symbols\": [{\"literal\":\"<\"}], \"postprocess\": $unpack 'heavy',          0, 'value',},\n          {\"name\": \"light\", \"symbols\": [{\"literal\":\">\"}], \"postprocess\": $unpack 'light',          0, 'value',},\n          {\"name\": \"doubt\", \"symbols\": [{\"literal\":\"?\"}], \"postprocess\": $unpack 'doubt',          0, 'value',},\n          {\"name\": \"upsidedown\", \"symbols\": [{\"literal\":\"↻\"}], \"postprocess\": $unpack 'upsidedown',     0, 'value',},\n          {\"name\": \"mirror\", \"symbols\": [{\"literal\":\"↔\"}], \"postprocess\": $unpack 'mirror',         0, 'value',},\n          {\"name\": \"flip\", \"symbols\": [{\"literal\":\"↕\"}], \"postprocess\": $unpack 'flip',           0, 'value',},\n          {\"name\": \"leftright\", \"symbols\": [{\"literal\":\"⿰\"}], \"postprocess\": $unpack 'leftright',      0, 'value',},\n          {\"name\": \"topdown\", \"symbols\": [{\"literal\":\"⿱\"}], \"postprocess\": $unpack 'topdown',        0, 'value',},\n          {\"name\": \"surround\", \"symbols\": [{\"literal\":\"⿴\"}], \"postprocess\": $unpack 'surround',       0, 'value',},\n          {\"name\": \"cap\", \"symbols\": [{\"literal\":\"⿵\"}], \"postprocess\": $unpack 'cap',            0, 'value',},\n          {\"name\": \"cup\", \"symbols\": [{\"literal\":\"⿶\"}], \"postprocess\": $unpack 'cup',            0, 'value',},\n          {\"name\": \"leftembrace\", \"symbols\": [{\"literal\":\"⿷\"}], \"postprocess\": $unpack 'leftembrace',    0, 'value',},\n          {\"name\": \"topleft\", \"symbols\": [{\"literal\":\"⿸\"}], \"postprocess\": $unpack 'topleft',        0, 'value',},\n          {\"name\": \"topright\", \"symbols\": [{\"literal\":\"⿹\"}], \"postprocess\": $unpack 'topright',       0, 'value',},\n          {\"name\": \"leftbottom\", \"symbols\": [{\"literal\":\"⿺\"}], \"postprocess\": $unpack 'leftbottom',     0, 'value',},\n          {\"name\": \"interlace\", \"symbols\": [{\"literal\":\"⿻\"}], \"postprocess\": $unpack 'interlace',      0, 'value',},\n          {\"name\": \"topleftcorner\", \"symbols\": [{\"literal\":\"◰\"}], \"postprocess\": $unpack 'topleftcorner',  0, 'value',},\n          {\"name\": \"lbracket\", \"symbols\": [{\"literal\":\"(\"}], \"postprocess\": $unpack 'lbracket',       0, 'value',},\n          {\"name\": \"rbracket\", \"symbols\": [{\"literal\":\")\"}], \"postprocess\": $unpack 'rbracket',       0, 'value',},\n          {\"name\": \"nosuchformula\", \"symbols\": [{\"literal\":\"∅\"}], \"postprocess\": $unpack 'nosuchformula',  0, 'value',},\n          {\"name\": \"terminator\", \"symbols\": [{\"literal\":\"●\"}], \"postprocess\": $unpack 'terminator',     0, 'value',},\n          {\"name\": \"inhibitor\", \"symbols\": [{\"literal\":\"▽\"}], \"postprocess\": $unpack 'inhibitor',      0, 'value',},\n          {\"name\": \"getamark\", \"symbols\": [{\"literal\":\"〓\"}], \"postprocess\": $unpack 'getamark',       0, 'value',},\n          {\"name\": \"curl\", \"symbols\": [{\"literal\":\"§\"}], \"postprocess\": $unpack 'curl',           0, 'value',},\n          {\"name\": \"anycomponent\", \"symbols\": [{\"literal\":\"_\"}], \"postprocess\": $unpack 'anycomponent',   0, 'value',},\n          {\"name\": \"anyoperator\", \"symbols\": [{\"literal\":\"%\"}], \"postprocess\": $unpack 'anyoperator',    0, 'value',},\n          {\"name\": \"anyclause$string$1\", \"symbols\": [{\"literal\":\"?\"}, {\"literal\":\"?\"}, {\"literal\":\"?\"}, {\"literal\":\"?\"}, {\"literal\":\"?\"}, {\"literal\":\"?\"}, {\"literal\":\"?\"}, {\"literal\":\"?\"}, {\"literal\":\"?\"}, {\"literal\":\"?\"}, {\"literal\":\"?\"}], \"postprocess\": (d) -> d.join('')},\n          {\"name\": \"anyclause\", \"symbols\": [\"anyclause$string$1\"], \"postprocess\": $unpack 'anyclause',      0, 'value',}\n      ],\n    ParserStart: \"start\"\n  }\n  if typeof module != 'undefined' && typeof module.exports != 'undefined'\n    module.exports = grammar;\n  else\n    window.grammar = grammar;\n"
  ]
}