// Generated by CoffeeScript 1.12.4
(function() {
  'use strict';
  var CND, IDLX_GRAMMAR, IDL_GRAMMAR, Idl_lexer, NCR, NEARLEY, PATH, badge, debug, diagram, echo, formula, help, info, log, rpr, tokens, urge, warn, whisper,
    slice = [].slice;

  PATH = require('path');

  CND = require('cnd');

  rpr = CND.rpr;

  badge = 'NEARlEY';

  log = CND.get_logger('plain', badge);

  debug = CND.get_logger('debug', badge);

  info = CND.get_logger('info', badge);

  warn = CND.get_logger('warn', badge);

  help = CND.get_logger('help', badge);

  urge = CND.get_logger('urge', badge);

  whisper = CND.get_logger('whisper', badge);

  echo = CND.echo.bind(CND);

  NEARLEY = require('nearley');

  IDL_GRAMMAR = require('./idl');

  IDLX_GRAMMAR = require('./idlx');

  NCR = Object.create(require('ncr'));

  NCR._input_default = 'xncr';

  NCR.jzr_as_uchr = function(glyph) {
    if ((this.as_csg(glyph)) === 'jzr') {
      return this.as_uchr(glyph);
    }
    return glyph;
  };

  NCR.jzr_as_xncr = function(glyph) {
    var nfo;
    nfo = this.analyze(glyph);
    if (!((nfo.rsg === 'u-pua') || (nfo.csg === 'jzr'))) {
      return glyph;
    }
    return this.as_chr(nfo.cid, {
      csg: 'jzr'
    });
  };

  Idl_lexer = function() {
    this.reset('');
    return null;
  };

  Idl_lexer.prototype.reset = function(data, state) {
    this.buffer = NCR.chrs_from_text(data, {
      input: 'xncr'
    });
    this.index = 0;
    this.line = state ? state.line : 1;
    this.prv_nl = state ? -state.col : 0;
    return null;
  };

  Idl_lexer.prototype.next = function() {
    var chr;
    if (this.index < this.buffer.length) {
      chr = NCR.jzr_as_uchr(this.buffer[this.index]);
      this.index += +1;
      if (chr === '\n') {
        this.line += +1;
        this.prv_nl = this.index;
      }
      return {
        value: chr
      };
    }
    return null;
  };

  Idl_lexer.prototype.save = function() {
    return {
      line: this.line,
      col: this.index - this.prv_nl
    };
  };

  Idl_lexer.prototype.formatError = function(token, message) {
    var R;
    R = message + " at index " + (this.index - 1) + " (" + (this.buffer.join('')) + ")";
    return R;
  };

  this.IDL = {};

  this.IDL.parse = function(source) {
    var R, type;
    if ((type = CND.type_of(source)) !== 'text') {
      throw new Error("expected a text, got a " + type);
    }
    if (source.length === 0) {
      throw new Error("expected a non-empty text, got an empty text");
    }

    /* TAINT should we rewind()? finish()? parser? */
    this._parser = new NEARLEY.Parser(IDL_GRAMMAR.ParserRules, IDL_GRAMMAR.ParserStart, {
      lexer: new Idl_lexer()
    });
    this._parser.feed(source);
    if (this._parser.results.length !== 1) {
      throw new Error("Syntax Error: " + (rpr(source)));
    }
    R = this._parser.results[0];
    if (R.length === 1) {
      R = R[0];
    }
    return R;
  };

  this.IDLX = {};

  this.IDLX.parse = function(source) {
    var R, type;
    if ((type = CND.type_of(source)) !== 'text') {
      throw new Error("expected a text, got a " + type);
    }
    if (source.length === 0) {
      throw new Error("expected a non-empty text, got an empty text");
    }

    /* TAINT should we rewind()? finish()? parser? */
    this._parser = new NEARLEY.Parser(IDLX_GRAMMAR.ParserRules, IDLX_GRAMMAR.ParserStart, {
      lexer: new Idl_lexer()
    });
    this._parser.feed(source);
    if (this._parser.results.length !== 1) {
      throw new Error("Syntax Error: " + (rpr(source)));
    }
    R = this._parser.results[0];
    if (R.length === 1) {
      R = R[0];
    }
    return R;
  };


  /* TAINT methods in this section should be made available for IDL as well */

  this.IDLX._get_literals_and_types = (function(_this) {
    return function(grammar) {
      var paths;
      paths = _this.IDLX._paths_from_grammar(IDLX_GRAMMAR);
      return _this.IDLX._literals_and_types_from_paths(paths);
    };
  })(this);

  this.IDLX._literals_and_types_from_paths = (function(_this) {
    return function(paths) {
      var R, _, i, len, literal, match, path, type;
      R = {};
      for (i = 0, len = paths.length; i < len; i++) {
        path = paths[i];

        /* TAINT pattern should allow literal double quotes */
        if (!(match = path.match(/\+([^\/+]+)\+.*"([^"])"$/))) {
          throw new Error("illegal path " + (rpr(path)));
        }
        _ = match[0], type = match[1], literal = match[2];
        R[literal] = type;
      }
      return R;
    };
  })(this);

  this.IDLX._paths_from_grammar = (function(_this) {
    return function(grammar) {
      var paths, registry;
      registry = _this.IDLX._registry_from_grammar(grammar);
      paths = new Set();
      _this.IDLX._condense(registry, new Set(), paths, grammar.ParserStart);
      return Array.from(paths);
    };
  })(this);

  this.IDLX._registry_from_grammar = (function(_this) {
    return function(grammar) {
      var R, entry, i, j, len, len1, name, ref, rule, symbol, symbols, target;
      R = {};
      ref = grammar.ParserRules;
      for (i = 0, len = ref.length; i < len; i++) {
        rule = ref[i];
        name = rule.name, symbols = rule.symbols;
        for (j = 0, len1 = symbols.length; j < len1; j++) {
          symbol = symbols[j];
          if (CND.isa_pod(symbol)) {
            symbol = '"' + symbol.literal + '"';
          }
          entry = R[symbol] != null ? R[symbol] : R[symbol] = [];
          target = R[name] != null ? R[name] : R[name] = [];
          target.push(symbol);
        }
      }
      return R;
    };
  })(this);

  this.IDLX._condense = (function(_this) {
    return function(registry, seen, paths, name, route) {
      var entry, i, is_public_name, len, path, symbol, symbols;
      if (route == null) {
        route = [];
      }
      if (seen.has(name)) {
        return;
      }
      seen.add(name);
      symbols = registry[name];
      is_public_name = !/\$/.test(name);
      if (is_public_name) {
        route.push(name);
      }
      for (i = 0, len = symbols.length; i < len; i++) {
        symbol = symbols[i];
        entry = registry[symbol];
        if (entry.length === 0) {
          route.push(symbol);
          if (!/(?:\/\/)|(?:\/$)/.test((path = route.join('/')))) {
            paths.add(path);
          }
          route.pop();
        } else {
          _this.IDLX._condense(registry, seen, paths, symbol, route);
        }
      }
      if (is_public_name) {
        route.pop();
      }
      return null;
    };
  })(this);

  this.IDLX.type_from_literal = (function(_this) {
    return function(literal) {
      var ref;
      return (ref = _this.IDLX.literals_and_types[literal]) != null ? ref : 'component';
    };
  })(this);

  this.IDLX.list_tokens = (function(_this) {
    return function(diagram_or_formula) {
      var R, diagram, type;
      switch (type = CND.type_of(diagram_or_formula)) {
        case 'text':
          diagram = _this.IDLX.parse(diagram_or_formula);
          break;
        case 'list':
          diagram = diagram_or_formula;
          break;
        default:
          throw new Error("expected a text or a list, got a " + type + " in " + (rpr(diagram_or_formula)));
      }
      R = _this.IDLX._list_tokens(diagram, []);
      return R;
    };
  })(this);

  this.IDLX._list_tokens = (function(_this) {
    return function(diagram, R) {
      var element, i, idx, is_bracketed, len, token_type, type;
      for (idx = i = 0, len = diagram.length; i < len; idx = ++i) {
        element = diagram[idx];
        switch (type = CND.type_of(element)) {
          case 'text':
            token_type = _this.IDLX.type_from_literal(element);
            R.push({
              t: token_type,
              s: element
            });
            break;
          case 'list':
            if (idx === 0) {
              throw new Error("expected a text as first element of diagram, got a " + type + " in " + (rpr(diagram)));
            }
            is_bracketed = element.length > 2;
            if (is_bracketed) {
              R.push({
                t: 'lbracket',
                s: '('
              });
            }
            R.splice.apply(R, [R.length, 0].concat(slice.call(_this.IDLX.list_tokens(element, R))));
            if (is_bracketed) {
              R.push({
                t: 'rbracket',
                s: ')'
              });
            }
            break;
          default:
            throw new Error("expected a text or a list, got a " + type + " in " + (rpr(diagram)));
        }
      }
      return R;
    };
  })(this);

  this.IDLX.get_formula = (function(_this) {
    return function(diagram_or_formula) {

      /* TAINT possible inputs should be formula, diagram, or tokenlist */
      var literal;
      return ((function() {
        var i, len, ref, results;
        ref = this.IDLX.list_tokens(diagram_or_formula);
        results = [];
        for (i = 0, len = ref.length; i < len; i++) {
          literal = ref[i].s;
          results.push(literal);
        }
        return results;
      }).call(_this)).join('');
    };
  })(this);

  this.IDLX.formula_may_be_suboptimal = (function(_this) {
    return function(formula) {
      var type;
      if ((type = CND.type_of(formula)) !== 'text') {
        throw new Error("expected a text, got a " + type);
      }
      return _this.IDLX._get_treeshaker_litmus().test(formula);
    };
  })(this);

  this.IDLX.normalize_diagram = (function(_this) {
    return function(diagram) {
      var type;
      if ((type = CND.type_of(diagram)) !== 'list') {
        throw new Error("expected a list, got a " + type + " in " + (rpr(diagram)));
      }
      return _this.IDLX._shake_tree(JSON.parse(JSON.stringify(diagram)));
    };
  })(this);

  this.IDLX.normalize_formula = (function(_this) {
    return function(formula) {
      var type;
      if ((type = CND.type_of(formula)) !== 'text') {
        throw new Error("expected a text, got a " + type + " in " + (rpr(formula)));
      }
      return _this.IDLX.get_formula(_this.IDLX._shake_tree(_this.IDLX.parse(formula)));
    };
  })(this);

  this.IDLX._shake_tree = (function(_this) {
    return function(diagram) {
      var argument_idx, operator, ref, sub_operator, sub_tree, type;
      if ((type = CND.type_of(diagram)) !== 'list') {
        throw new Error("expected a list, got a " + type);
      }
      operator = diagram[0];
      argument_idx = 0;
      while (true) {
        argument_idx += +1;
        if (argument_idx > diagram.length - 1) {
          break;
        }
        sub_tree = diagram[argument_idx];
        if ((CND.type_of(sub_tree)) !== 'list') {
          continue;
        }
        sub_operator = sub_tree[0];
        if (operator === sub_operator) {
          [].splice.apply(diagram, [argument_idx, argument_idx - argument_idx + 1].concat(ref = sub_tree.slice(1))), ref;
          argument_idx += -1;
        } else {
          _this.IDLX._shake_tree(sub_tree);
        }
      }
      return diagram;
    };
  })(this);

  this.IDLX._get_treeshaker_litmus = (function(_this) {
    return function() {

      /* When `@IDLX._get_treeshaker_litmus.pattern` matches a formula, it *may* be non-optimal; if the pattern
      does *not* match a formula, there are certainly no opportunities for optimization. The pattern works by
      trying to match sequences like `/...|(?:O[^MNPQ]*O)|(?:P[^MNOQ]*P)|.../`, where `MNOPQ` are the binary
      operators.
       */
      var R, binary_operators, i, j, len, len1, operator, pattern, ref, sub_operator, sub_pattern, symbol, token_type;
      if ((R = _this.IDLX._get_treeshaker_litmus.pattern) != null) {
        return R;
      }
      binary_operators = [];
      ref = _this.IDLX.literals_and_types;
      for (symbol in ref) {
        token_type = ref[symbol];
        if (token_type === 'binary_operator') {
          binary_operators.push(symbol);
        }
      }
      pattern = [];
      for (i = 0, len = binary_operators.length; i < len; i++) {
        operator = binary_operators[i];
        sub_pattern = [];
        sub_pattern.push('[^');
        for (j = 0, len1 = binary_operators.length; j < len1; j++) {
          sub_operator = binary_operators[j];
          if (sub_operator === operator) {
            continue;
          }
          sub_pattern.push(sub_operator);
        }
        sub_pattern.push(']*');
        pattern.push('(?:' + operator + (sub_pattern.join('')) + operator + ')');
      }
      return _this.IDLX._get_treeshaker_litmus.pattern = new RegExp(pattern.join('|'));
    };
  })(this);

  this.IDLX._get_treeshaker_litmus.pattern = null;

  this.IDLX.literals_and_types = this.IDLX._get_literals_and_types(IDLX_GRAMMAR);

  if (module.parent == null) {
    info(this.IDLX._get_literals_and_types(IDLX_GRAMMAR));
    info(this.IDLX.type_from_literal(IDLX_GRAMMAR));
    help('↻', this.IDLX.type_from_literal('↻'));
    help('〓', this.IDLX.type_from_literal('〓'));
    help('§', this.IDLX.type_from_literal('§'));
    help('⿰', this.IDLX.type_from_literal('⿰'));
    help('⿻', this.IDLX.type_from_literal('⿻'));
    help('◰', this.IDLX.type_from_literal('◰'));
    help('(', this.IDLX.type_from_literal('('));
    help('x', this.IDLX.type_from_literal('x'));
    formula = '⿹弓(⿰(⿱人人丨)(⿱人人丨)(⿱人人丨))';
    whisper(formula);
    help(diagram = this.IDLX.parse(formula));
    whisper(formula);
    help(tokens = this.IDLX.list_tokens(diagram));
    urge(this.IDLX.get_formula(formula));
    urge(this.IDLX.get_formula(diagram));
    urge(this.IDLX._get_treeshaker_litmus());
    urge(CND.yellow(formula), CND.blue(CND.truth(this.IDLX.formula_may_be_suboptimal(formula))));
    urge(CND.yellow('⿱⿱𫝀口㐄'), CND.blue(CND.truth(this.IDLX.formula_may_be_suboptimal('⿱⿱𫝀口㐄'))));
    urge(CND.yellow('⿱𫝀⿱口㐄'), CND.blue(CND.truth(this.IDLX.formula_may_be_suboptimal('⿱𫝀⿱口㐄'))));
    urge(CND.yellow('⿰韋(⿱白大十)'), CND.blue(CND.truth(this.IDLX.formula_may_be_suboptimal('⿰韋(⿱白大十)'))));
    info(CND.yellow(formula), CND.blue(this.IDLX.normalize_formula(formula)));
    info(CND.yellow('⿱⿱𫝀口㐄'), CND.blue(this.IDLX.normalize_formula('⿱⿱𫝀口㐄')));
    info(CND.yellow('⿱𫝀⿱口㐄'), CND.blue(this.IDLX.normalize_formula('⿱𫝀⿱口㐄')));
    info(CND.yellow('⿰韋(⿱白大十)'), CND.blue(this.IDLX.normalize_formula('⿰韋(⿱白大十)')));
    process.exit(1);
  }

}).call(this);

//# sourceMappingURL=main.js.map
