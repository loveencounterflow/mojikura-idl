// Generated by CoffeeScript 1.12.4
(function() {
  'use strict';
  var CND, IDLX_GRAMMAR, IDL_GRAMMAR, Idl_lexer, NCR, NEARLEY, PATH, badge, debug, echo, help, info, log, rpr, urge, warn, whisper;

  PATH = require('path');

  CND = require('cnd');

  rpr = CND.rpr;

  badge = 'NEARlEY';

  log = CND.get_logger('plain', badge);

  debug = CND.get_logger('debug', badge);

  info = CND.get_logger('info', badge);

  warn = CND.get_logger('warn', badge);

  help = CND.get_logger('help', badge);

  urge = CND.get_logger('urge', badge);

  whisper = CND.get_logger('whisper', badge);

  echo = CND.echo.bind(CND);

  NEARLEY = require('nearley');

  IDL_GRAMMAR = require('./idl');

  IDLX_GRAMMAR = require('./idlx');

  NCR = Object.create(require('ncr'));

  NCR._input_default = 'xncr';

  NCR.jzr_as_uchr = function(glyph) {
    if ((this.as_csg(glyph)) === 'jzr') {
      return this.as_uchr(glyph);
    }
    return glyph;
  };

  NCR.jzr_as_xncr = function(glyph) {
    var nfo;
    nfo = this.analyze(glyph);
    if (!((nfo.rsg === 'u-pua') || (nfo.csg === 'jzr'))) {
      return glyph;
    }
    return this.as_chr(nfo.cid, {
      csg: 'jzr'
    });
  };

  Idl_lexer = function() {
    this.reset('');
    return null;
  };

  Idl_lexer.prototype.reset = function(data, state) {
    this.buffer = NCR.chrs_from_text(data, {
      input: 'xncr'
    });
    this.index = 0;
    this.line = state ? state.line : 1;
    this.prv_nl = state ? -state.col : 0;
    return null;
  };

  Idl_lexer.prototype.next = function() {
    var chr;
    if (this.index < this.buffer.length) {
      chr = this.buffer[this.index];
      this.index += +1;
      if (chr === '\n') {
        this.line += +1;
        this.prv_nl = this.index;
      }
      return {
        value: chr
      };
    }
    return null;
  };

  Idl_lexer.prototype.save = function() {
    return {
      line: this.line,
      col: this.index - this.prv_nl
    };
  };

  Idl_lexer.prototype.formatError = function(token, message) {
    var R;
    R = message + " at index " + (this.index - 1) + " (" + (this.buffer.join('')) + ")";
    return R;
  };

  this.IDL = {};

  this.IDL.parse = function(source) {
    var R, type;
    if ((type = CND.type_of(source)) !== 'text') {
      throw new Error("expected a text, got a " + type);
    }
    if (source.length === 0) {
      throw new Error("expected a non-empty text, got an empty text");
    }

    /* TAINT should we rewind()? finish()? parser? */
    this._parser = new NEARLEY.Parser(IDL_GRAMMAR.ParserRules, IDL_GRAMMAR.ParserStart, {
      lexer: new Idl_lexer()
    });
    this._parser.feed(source);
    if (this._parser.results.length !== 1) {
      throw new Error("Syntax Error: " + (rpr(source)));
    }
    R = this._parser.results[0];
    if (R.length === 1) {
      R = R[0];
    }
    return R;
  };

  this.IDLX = {};

  this.IDLX.parse = function(source) {
    var R, type;
    if ((type = CND.type_of(source)) !== 'text') {
      throw new Error("expected a text, got a " + type);
    }
    if (source.length === 0) {
      throw new Error("expected a non-empty text, got an empty text");
    }

    /* TAINT should we rewind()? finish()? parser? */
    this._parser = new NEARLEY.Parser(IDLX_GRAMMAR.ParserRules, IDLX_GRAMMAR.ParserStart, {
      lexer: new Idl_lexer()
    });
    this._parser.feed(source);
    if (this._parser.results.length !== 1) {
      throw new Error("Syntax Error: " + (rpr(source)));
    }
    R = this._parser.results[0];
    if (R.length === 1) {
      R = R[0];
    }
    return R;
  };

}).call(this);

//# sourceMappingURL=main.js.map
