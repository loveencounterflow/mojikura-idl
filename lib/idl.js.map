{
  "version": 3,
  "file": "idl.js",
  "sourceRoot": "..",
  "sources": [
    "src/idl.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "# Generated automatically by nearley\n# http://github.com/Hardmath123/nearley\ndo ->\n  id = (d)->d[0]\n\n  \n  CND                       = require 'cnd'\n  rpr                       = CND.rpr\n  badge                     = 'NEARlEY'\n  log                       = CND.get_logger 'plain',     badge\n  debug                     = CND.get_logger 'debug',     badge\n  info                      = CND.get_logger 'info',      badge\n  silent                    = no\n  silent                    = yes\n  \n  #-----------------------------------------------------------------------------------------------------------\n  $unpack = ( label, keys... ) ->\n    return ( data, loc, reject ) ->\n      R = data\n      for key in keys\n        break if CND.isa_text R\n        R = R[ key ]\n      unless silent\n        R.label = label\n        debug '9982', label, data, rpr R\n      return R\n  \n  \n  grammar = {\n    Lexer: undefined,\n    ParserRules: [\n          {\"name\": \"start\", \"symbols\": [\"term\"], \"postprocess\": $unpack 'start',       0, 0},\n          {\"name\": \"expression$subexpression$1\", \"symbols\": [\"term\"]},\n          {\"name\": \"expression$subexpression$1\", \"symbols\": [\"component\"]},\n          {\"name\": \"expression\", \"symbols\": [\"expression$subexpression$1\"], \"postprocess\": $unpack 'expression',  0, 0, 0},\n          {\"name\": \"term$subexpression$1\", \"symbols\": [\"binary_term\"]},\n          {\"name\": \"term$subexpression$1\", \"symbols\": [\"trinary_term\"]},\n          {\"name\": \"term\", \"symbols\": [\"term$subexpression$1\"], \"postprocess\": $unpack 'term',        0},\n          {\"name\": \"binary_term$subexpression$1\", \"symbols\": [\"binary_operator\", \"expression\", \"expression\"]},\n          {\"name\": \"binary_term\", \"symbols\": [\"binary_term$subexpression$1\"], \"postprocess\": $unpack 'binary_term', 0},\n          {\"name\": \"trinary_term$subexpression$1\", \"symbols\": [\"trinary_operator\", \"expression\", \"expression\", \"expression\"]},\n          {\"name\": \"trinary_term\", \"symbols\": [\"trinary_term$subexpression$1\"], \"postprocess\": $unpack 'trinary_term',0},\n          {\"name\": \"component\", \"symbols\": [/./], \"postprocess\": \n              ( data, loc, reject ) ->\n                [ { value: chr, }, ] = data\n                return reject if /^\\s+$/.test chr\n                return reject if /^[⿰⿱⿴⿵⿶⿷⿸⿹⿺⿻⿲⿳]$/.test chr\n                info '33821', ( rpr data ), ( rpr chr ) unless silent\n                return chr\n              },\n          {\"name\": \"binary_operator$subexpression$1\", \"symbols\": [\"leftright\"]},\n          {\"name\": \"binary_operator$subexpression$1\", \"symbols\": [\"topdown\"]},\n          {\"name\": \"binary_operator$subexpression$1\", \"symbols\": [\"surround\"]},\n          {\"name\": \"binary_operator$subexpression$1\", \"symbols\": [\"cap\"]},\n          {\"name\": \"binary_operator$subexpression$1\", \"symbols\": [\"cup\"]},\n          {\"name\": \"binary_operator$subexpression$1\", \"symbols\": [\"leftembrace\"]},\n          {\"name\": \"binary_operator$subexpression$1\", \"symbols\": [\"topleft\"]},\n          {\"name\": \"binary_operator$subexpression$1\", \"symbols\": [\"topright\"]},\n          {\"name\": \"binary_operator$subexpression$1\", \"symbols\": [\"leftbottom\"]},\n          {\"name\": \"binary_operator$subexpression$1\", \"symbols\": [\"interlace\"]},\n          {\"name\": \"binary_operator\", \"symbols\": [\"binary_operator$subexpression$1\"], \"postprocess\": $unpack 'binary_operator',  0, 0},\n          {\"name\": \"trinary_operator$subexpression$1\", \"symbols\": [\"pillars\"]},\n          {\"name\": \"trinary_operator$subexpression$1\", \"symbols\": [\"layers\"]},\n          {\"name\": \"trinary_operator\", \"symbols\": [\"trinary_operator$subexpression$1\"], \"postprocess\": $unpack 'trinary_operator', 0, 0},\n          {\"name\": \"leftright\", \"symbols\": [{\"literal\":\"⿰\"}], \"postprocess\": $unpack 'leftright',    0, 'value'},\n          {\"name\": \"topdown\", \"symbols\": [{\"literal\":\"⿱\"}], \"postprocess\": $unpack 'topdown',      0, 'value'},\n          {\"name\": \"surround\", \"symbols\": [{\"literal\":\"⿴\"}], \"postprocess\": $unpack 'surround',     0, 'value'},\n          {\"name\": \"cap\", \"symbols\": [{\"literal\":\"⿵\"}], \"postprocess\": $unpack 'cap',          0, 'value'},\n          {\"name\": \"cup\", \"symbols\": [{\"literal\":\"⿶\"}], \"postprocess\": $unpack 'cup',          0, 'value'},\n          {\"name\": \"leftembrace\", \"symbols\": [{\"literal\":\"⿷\"}], \"postprocess\": $unpack 'leftembrace',  0, 'value'},\n          {\"name\": \"topleft\", \"symbols\": [{\"literal\":\"⿸\"}], \"postprocess\": $unpack 'topleft',      0, 'value'},\n          {\"name\": \"topright\", \"symbols\": [{\"literal\":\"⿹\"}], \"postprocess\": $unpack 'topright',     0, 'value'},\n          {\"name\": \"leftbottom\", \"symbols\": [{\"literal\":\"⿺\"}], \"postprocess\": $unpack 'leftbottom',   0, 'value'},\n          {\"name\": \"interlace\", \"symbols\": [{\"literal\":\"⿻\"}], \"postprocess\": $unpack 'interlace',    0, 'value'},\n          {\"name\": \"pillars\", \"symbols\": [{\"literal\":\"⿲\"}], \"postprocess\": $unpack 'pillars',      0, 'value'},\n          {\"name\": \"layers\", \"symbols\": [{\"literal\":\"⿳\"}], \"postprocess\": $unpack 'layers',       0, 'value'}\n      ],\n    ParserStart: \"start\"\n  }\n  if typeof module != 'undefined' && typeof module.exports != 'undefined'\n    module.exports = grammar;\n  else\n    window.grammar = grammar;\n"
  ]
}