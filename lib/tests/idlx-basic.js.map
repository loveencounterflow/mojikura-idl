{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../../src/tests/idlx-basic.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'MOJIKURA-IDL/tests'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nTAP                       = require 'tap'\n{ IDL, IDLX, }            = require '../..'\n{ isa\n  type_of\n  validate\n  equals   }              = require '../types'\n\n\n#===========================================================================================================\n# TESTS (IDLX)\n#-----------------------------------------------------------------------------------------------------------\nTAP.test \"(IDLX) simple formulas\", ( T ) ->\n  probes_and_matchers = [\n    [\"⿱刀口\",[\"⿱\",\"刀\",\"口\"]]\n    [\"⿱癶⿰弓貝\",[\"⿱\",\"癶\",[\"⿰\",\"弓\",\"貝\"]]]\n    [\"⿱⿰亻式貝\",[\"⿱\",[\"⿰\",\"亻\",\"式\"],\"貝\"]]\n    [\"⿱⿰亻式⿱目八\",[\"⿱\",[\"⿰\",\"亻\",\"式\"],[\"⿱\",\"目\",\"八\"]]]\n    [\"⿺辶言\",[\"⿺\",\"辶\",\"言\"]]\n    [\"⿰ab\",[\"⿰\",\"a\",\"b\"]]\n    [\"⿰⿰abc\",[\"⿰\",[\"⿰\",\"a\",\"b\"],\"c\"]]\n    [\"⿱⿱刀口乙\",[\"⿱\",[\"⿱\",\"刀\",\"口\"],\"乙\"]]\n    [\"⿱⿱刀口乙\",[\"⿱\",[\"⿱\",\"刀\",\"口\"],\"乙\"]]\n    [\"⿱&jzr#xe24a;&jzr#xe11d;\",[\"⿱\",\"\",\"\"]]\n    [\"⿰𠁣𠃛\",[\"⿰\",\"𠁣\",\"𠃛\"]]\n    ]\n  for [ probe, matcher, ] in probes_and_matchers\n    # result = resume_next T, -> IDLX.parse probe\n    result = IDLX.parse probe\n    urge ( CND.truth equals result, matcher ), JSON.stringify [ probe, result, ]\n    # urge ( rpr probe ), result\n    T.ok equals result, matcher\n  #.........................................................................................................\n  T.end()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\nTAP.test \"(IDLX) reject bogus formulas\", ( T ) ->\n  probes_and_matchers = [\n    [\"⿲木木木\",\"invalid syntax at index 0 (⿲木木木)\\nUnexpected \\\"⿲\\\"\\n\"]\n    [\"木\",\"invalid syntax at index 0 (木)\\nUnexpected \\\"木\\\"\\n\"]\n    [42,\"expected a text, got a number\"]\n    [\"\",\"expected a non-empty text, got an empty text\"]\n    [\"⿱⿰亻式⿱目八木木木\",\"invalid syntax at index 7 (⿱⿰亻式⿱目八木木木)\\nUnexpected \\\"木\\\"\\n\"]\n    [\"⿺廴聿123\",\"invalid syntax at index 3 (⿺廴聿123)\\nUnexpected \\\"1\\\"\\n\"]\n    [\"⿺\",\"Syntax Error: '⿺'\"]\n    [\"⿺⿺⿺⿺\",\"Syntax Error: '⿺⿺⿺⿺'\"]\n    ]\n  for [ probe, matcher, ] in probes_and_matchers\n    try\n      result = IDLX.parse probe\n      debug ( rpr probe ), ( rpr result )\n      warn \"expected an exception, got result #{rpr result}\"\n      T.fail \"expected an exception, got result #{rpr result}\"\n    catch error\n      { message, } = error\n      urge JSON.stringify [ probe, message, ]\n     T.ok equals message, matcher\n  #.........................................................................................................\n  T.end()\n  return null\n\n\n\n"
  ]
}