{
  "version": 3,
  "file": "idlx-bracketed.js",
  "sourceRoot": "../..",
  "sources": [
    "src/tests/idlx-bracketed.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'MOJIKURA-IDL/tests'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nTAP                       = require 'tap'\n{ IDL, IDLX, }            = require '../..'\n\n\n#===========================================================================================================\n# TESTS (IDLX)\n#-----------------------------------------------------------------------------------------------------------\nTAP.test \"(IDLX) bracketed formulas (simple)\", ( T ) ->\n  probes_and_matchers = [\n    [\"(⿰亻聿式)\",[\"⿰\",\"亻\",\"聿\",\"式\"]]\n    [\"(⿱北㓁允)\",[\"⿱\",\"北\",\"㓁\",\"允\"]]\n    [\"(⿱㽞一口)\",[\"⿱\",\"㽞\",\"一\",\"口\"]]\n    [\"(⿰亻聿式刀口乙)\",[\"⿰\",\"亻\",\"聿\",\"式\",\"刀\",\"口\",\"乙\"]]\n    ]\n  for [ probe, matcher, ] in probes_and_matchers\n    # result = resume_next T, -> IDLX.parse probe\n    result = IDLX.parse probe\n    urge ( CND.truth CND.equals result, matcher ), JSON.stringify [ probe, result, ]\n    # urge ( rpr probe ), result\n    T.ok CND.equals result, matcher\n    # T.ok true\n  #.........................................................................................................\n  T.end()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\nTAP.test \"(IDLX) bracketed formulas (advanced)\", ( T ) ->\n  probes_and_matchers = [\n    [\"(⿱&jzr#xe223;一八⿰(⿱&jzr#xe223;一八)(⿱&jzr#xe223;一八))\",[\"⿱\",\"\",\"一\",\"八\",[\"⿰\",[\"⿱\",\"\",\"一\",\"八\"],[\"⿱\",\"\",\"一\",\"八\"]]]]\n    [\"(⿱(⿰亻聿式)一口)\",[\"⿱\",[\"⿰\",\"亻\",\"聿\",\"式\"],\"一\",\"口\"]]\n    [\"⿹弓(⿰(⿱人人丨)(⿱人人丨)(⿱人人丨))\",[\"⿹\",\"弓\",[\"⿰\",[\"⿱\",\"人\",\"人\",\"丨\"],[\"⿱\",\"人\",\"人\",\"丨\"],[\"⿱\",\"人\",\"人\",\"丨\"]]]]\n    [\"⿹弓(⿰(⿱人人丨)(⿱人人丨)(⿱人人丨))\",[\"⿹\",\"弓\",[\"⿰\",[\"⿱\",\"人\",\"人\",\"丨\"],[\"⿱\",\"人\",\"人\",\"丨\"],[\"⿱\",\"人\",\"人\",\"丨\"]]]]\n    [\"⿰臣(⿱𠂉(⿰人人人)(⿰古古古))\",[\"⿰\",\"臣\",[\"⿱\",\"𠂉\",[\"⿰\",\"人\",\"人\",\"人\"],[\"⿰\",\"古\",\"古\",\"古\"]]]]\n    [\"(⿱屮(⿰屮屮屮)一(⿰𠂈屮又))\",[\"⿱\",\"屮\",[\"⿰\",\"屮\",\"屮\",\"屮\"],\"一\",[\"⿰\",\"𠂈\",\"屮\",\"又\"]]]\n    [\"⿱(⿰車(⿱爫龴⿵冂厶)車)(⿰田⿵冂乂田)\",[\"⿱\",[\"⿰\",\"車\",[\"⿱\",\"爫\",\"龴\",[\"⿵\",\"冂\",\"厶\"]],\"車\"],[\"⿰\",\"田\",[\"⿵\",\"冂\",\"乂\"],\"田\"]]]\n    [\"(⿰阝(⿸𠂆虍人)(⿸𠂆虍人))\",[\"⿰\",\"阝\",[\"⿸\",\"𠂆\",\"虍\",\"人\"],[\"⿸\",\"𠂆\",\"虍\",\"人\"]]]\n    [\"⿰阝(⿱山人儿⿰(⿱山人儿)(⿱山人儿))\",[\"⿰\",\"阝\",[\"⿱\",\"山\",\"人\",\"儿\",[\"⿰\",[\"⿱\",\"山\",\"人\",\"儿\"],[\"⿱\",\"山\",\"人\",\"儿\"]]]]]\n    [\"⿰阜(⿱山介⿰(⿱山人几)(⿱山人几))\",[\"⿰\",\"阜\",[\"⿱\",\"山\",\"介\",[\"⿰\",[\"⿱\",\"山\",\"人\",\"几\"],[\"⿱\",\"山\",\"人\",\"几\"]]]]]\n    [\"(⿱厶(⿰刃工刃)一(⿰丶丶丶)口)\",[\"⿱\",\"厶\",[\"⿰\",\"刃\",\"工\",\"刃\"],\"一\",[\"⿰\",\"丶\",\"丶\",\"丶\"],\"口\"]]\n    ]\n  for [ probe, matcher, ] in probes_and_matchers\n    # result = resume_next T, -> IDLX.parse probe\n    result = IDLX.parse probe\n    urge ( CND.truth CND.equals result, matcher ), JSON.stringify [ probe, result, ]\n    # urge ( rpr probe ), result\n    T.ok CND.equals result, matcher\n    # T.ok true\n  #.........................................................................................................\n  T.end()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\nTAP.test \"(IDLX) reject bogus formulas\", ( T ) ->\n  probes_and_matchers = [\n    [\"⿲木木木\",\"invalid syntax at index 0 (⿲木木木)\\nUnexpected \\\"⿲\\\"\\n\"]\n    [\"木\",\"invalid syntax at index 0 (木)\\nUnexpected \\\"木\\\"\\n\"]\n    [42,\"expected a text, got a number\"]\n    [\"\",\"expected a non-empty text, got an empty text\"]\n    [\"⿱⿰亻式⿱目八木木木\",\"invalid syntax at index 7 (⿱⿰亻式⿱目八木木木)\\nUnexpected \\\"木\\\"\\n\"]\n    [\"⿺廴聿123\",\"invalid syntax at index 3 (⿺廴聿123)\\nUnexpected \\\"1\\\"\\n\"]\n    [\"⿺\",\"Syntax Error: '⿺'\"]\n    [\"⿺⿺⿺⿺\",\"Syntax Error: '⿺⿺⿺⿺'\"]\n#     [\"()\",\"IDLX: unexpected right bracket [ ( ✘ ) ✘  ]\"]\n#     [\"(⿰)\",\"IDLX: too few constituents [ (⿰ ✘ ) ✘  ]\"]\n#     [\"(聿)\",\"IDL: extra token(s) [ (聿 ✘ ) ✘  ]\"]\n#     [\")\",\"IDLX: unexpected right bracket [  ✘ ) ✘  ]\"]\n#     [\"⿰)\",\"IDLX: unexpected right bracket [ ⿰ ✘ ) ✘  ]\"]\n#     [\"聿)\",\"IDL: extra token(s) [ 聿 ✘ ) ✘  ]\"]\n#     [\"(⿰亻聿)\",\"IDLX: too few constituents [ (⿰亻聿 ✘ ) ✘  ]\"]\n#     [\"(⿰亻)\",\"IDLX: too few constituents [ (⿰亻 ✘ ) ✘  ]\"]\n#     [\"(⿰亻)聿\",\"IDLX: too few constituents [ (⿰亻 ✘ ) ✘ 聿 ]\"]\n#     [\"(≈北㓁)\",\"IDLX: cannot bracket unary operator [ ( ✘ ≈ ✘ 北㓁) ]\"]\n    ]\n  for [ probe, matcher, ] in probes_and_matchers\n    try\n      result = IDLX.parse probe\n      debug ( rpr probe ), ( rpr result )\n      warn \"expected an exception, got result #{rpr result}\"\n      T.fail \"expected an exception, got result #{rpr result}\"\n    catch error\n      { message, } = error\n      urge JSON.stringify [ probe, message, ]\n     T.ok CND.equals message, matcher\n  #.........................................................................................................\n  T.end()\n  return null\n\n###\n###\n\n\n"
  ]
}