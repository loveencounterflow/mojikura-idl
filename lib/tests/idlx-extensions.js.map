{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../../src/tests/idlx-extensions.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'MOJIKURA-IDL/tests'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nTAP                       = require 'tap'\n{ IDL, IDLX, }            = require '../..'\n{ isa\n  type_of\n  validate\n  equals   }              = require '../types'\n\n\n#-----------------------------------------------------------------------------------------------------------\nTAP.test \"(IDLX) solitaires\", ( T ) ->\n  probes_and_matchers = [\n    [\"●\",\"●\"]\n    [\"▽\",\"▽\"]\n    [\"∅\",\"∅\"]\n    ]\n  for [ probe, matcher, ] in probes_and_matchers\n    # result = resume_next T, -> IDLX.parse probe\n    result = IDLX.parse probe\n    urge ( CND.truth equals result, matcher ), JSON.stringify [ probe, result, ]\n    # urge ( rpr probe ), result\n    T.ok equals result, matcher\n  #.........................................................................................................\n  T.end()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\nTAP.test \"(IDLX) extensions\", ( T ) ->\n  probes_and_matchers = [\n    [ '⿱〓〓', [ '⿱', '〓', '〓' ]]\n    [ '⿺走⿹◰口〓日', [ '⿺', '走', [ '⿹', [ '◰', '口', '〓' ], '日' ] ], ]\n    [\"⿱丶⿵𠘨§\",[\"⿱\",\"丶\",[\"⿵\",\"𠘨\",\"§\"]]]\n    [ '↻正', [ '↻', '正', ], ]\n    [ '↔≈匕', [ '↔', [ '≈', '匕' ] ], ]\n    [ '≈正', [ '≈', '正', ], ]\n    [ '<正', [ '<', '正', ], ]\n    [ '>正', [ '>', '正', ], ]\n    [ '?正', [ '?', '正', ], ]\n    [ '↻正', [ '↻', '正', ], ]\n    [ '↔正', [ '↔', '正', ], ]\n    [ '↕正', [ '↕', '正', ], ]\n    [ '≈𪜀', [ '≈', '𪜀', ], ]\n    [\"≈〇\",[\"≈\",\"〇\"]]\n    ]\n  for [ probe, matcher, ] in probes_and_matchers\n    # result = resume_next T, -> IDLX.parse probe\n    result = IDLX.parse probe\n    urge ( CND.truth equals result, matcher ), JSON.stringify [ probe, result, ]\n    # urge ( rpr probe ), result\n    T.ok equals result, matcher\n  #.........................................................................................................\n  T.end()\n  return null\n\n###\n#-----------------------------------------------------------------------------------------------------------\nTAP.test \"(IDLX) reject bogus formulas\", ( T ) ->\n  probes_and_matchers = [\n    [\"⿲木木木\",\"invalid syntax at index 0 (⿲木木木)\\nUnexpected \\\"⿲\\\"\\n\"]\n    [\"木\",\"invalid syntax at index 0 (木)\\nUnexpected \\\"木\\\"\\n\"]\n    [42,\"expected a text, got a number\"]\n    [\"\",\"expected a non-empty text, got an empty text\"]\n    [\"⿱⿰亻式⿱目八木木木\",\"invalid syntax at index 7 (⿱⿰亻式⿱目八木木木)\\nUnexpected \\\"木\\\"\\n\"]\n    [\"⿺廴聿123\",\"invalid syntax at index 3 (⿺廴聿123)\\nUnexpected \\\"1\\\"\\n\"]\n    [\"⿺\",\"Syntax Error: '⿺'\"]\n    [\"⿺⿺⿺⿺\",\"Syntax Error: '⿺⿺⿺⿺'\"]\n    ]\n  for [ probe, matcher, ] in probes_and_matchers\n    try\n      result = IDLX.parse probe\n      debug ( rpr probe ), ( rpr result )\n      warn \"expected an exception, got result #{rpr result}\"\n      T.fail \"expected an exception, got result #{rpr result}\"\n    catch error\n      { message, } = error\n      urge JSON.stringify [ probe, message, ]\n     T.ok equals message, matcher\n  #.........................................................................................................\n  T.end()\n  return null\n###\n\n\n\n"
  ]
}