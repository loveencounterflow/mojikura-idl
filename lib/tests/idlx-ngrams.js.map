{
  "version": 3,
  "file": "idlx-ngrams.js",
  "sourceRoot": "../..",
  "sources": [
    "src/tests/idlx-ngrams.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'MOJIKURA-IDL/TESTS/NGRAMS'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nTAP                       = require 'tap'\n{ IDLX, }                 = require '../..'\n\n\n###\nNgrams with Relations:\n谆:⿰讠(⿱亠口子)\n谆∋⿰讠亠\n谆∋⿱亠口\n谆∋⿱口子\n(谆∋⿱亠...子)\n(谆∋⿰讠⿱亠)\n###\n\n#-----------------------------------------------------------------------------------------------------------\nconflate = ( bigrams ) ->\n  # bigrams.sort()\n  R = []\n  for bigram in bigrams\n    R.push ( token.s for token in bigram ).join ''\n  return R.join ','\n\n#-----------------------------------------------------------------------------------------------------------\nTAP.test \"(IDLX) ngrams\", ( T ) ->\n  ### !!!!!!!!!!!!!!!!!!!! ###\n  [ '䨻:⿱⿰⿱⻗田⿱⻗田⿰⿱⻗田⿱⻗田' ] ### TAINT not normalized? ###\n  [ '𩙡:⿱⿰⿵𠘨䖝⿵𠘨䖝⿰⿵𠘨䖝⿵𠘨䖝' ] ### TAINT not normalized? ###\n  ### !!!!!!!!!!!!!!!!!!!! ###\n  probes_and_matchers = [\n    [\"乳:⿰⿱爫子乚\",\"⿱爫子,⿰子乚\"]\n    [\"鐓:(⿰金(⿱亠口子)夊)\",\"⿰金亠,⿱亠口,⿱口子,⿰子夊\"]\n    [\"孔:⿰子乚\",\"⿰子乚\"]\n    [\"谆:⿰讠(⿱亠口子)\",\"⿰讠亠,⿱亠口,⿱口子\"]\n    [\"享:(⿱亠口子)\",\"⿱亠口,⿱口子\"]\n    [\"孫:⿰子系\",\"⿰子系\"]\n    [\"浮:⿰氵⿱爫子\",\"⿰氵爫,⿱爫子\"]\n    [\"仔:⿰亻子\",\"⿰亻子\"]\n    [\"郭:⿰(⿱亠口子)阝\",\"⿱亠口,⿱口子,⿰子阝\"]\n    [\"孙:⿰子小\",\"⿰子小\"]\n    [\"敦:⿰(⿱亠口子)夊\",\"⿱亠口,⿱口子,⿰子夊\"]\n    [\"孕:⿱乃子\",\"⿱乃子\"]\n    [\"遜:⿺辶⿰子系\",\"⿺辶子,⿰子系\"]\n    [\"鷻:(⿰鳥(⿱亠口子)夊)\",\"⿰鳥亠,⿱亠口,⿱口子,⿰子夊\"]\n    [\"𤅸:⿰氵⿱⿰臣⿱𠂉⿴占𠂭皿\",\"⿰氵臣,⿰臣𠂉,⿱𠂉占,⿴占𠂭,⿱𠂭皿\"]\n    [\"𣟁:⿰木⿱⿰阝⿱⿸𠂇工⺝土\",\"⿰木阝,⿰阝𠂇,⿸𠂇工,⿱工⺝,⿱⺝土\"]\n    [\"𧃚:⿱卄⿰月⿺辶⿱⿸𠂇工⺝\",\"⿱卄月,⿰月辶,⿺辶𠂇,⿸𠂇工,⿱工⺝\"]\n    [\"𥷿:⿱𥫗⿰⿱巛田⿸广⿱廿灬\",\"⿱𥫗巛,⿱巛田,⿰田广,⿸广廿,⿱廿灬\"]\n    [\"𤬣:⿱⿻⿴乂⿰⿱大亏瓜\",\"⿻,⿴乂,⿱乂大,⿱大亏,⿰亏瓜\"]\n    [\"䨻:⿱⿰⿱⻗田⿱⻗田⿰⿱⻗田⿱⻗田\",\"⿱⻗田,⿰田⻗,⿱⻗田,⿱田⻗,⿱⻗田,⿰田⻗,⿱⻗田\"]\n    [\"𩙡:⿱⿰⿵𠘨䖝⿵𠘨䖝⿰⿵𠘨䖝⿵𠘨䖝\",\"⿵𠘨䖝,⿰䖝𠘨,⿵𠘨䖝,⿱䖝𠘨,⿵𠘨䖝,⿰䖝𠘨,⿵𠘨䖝\"]\n    [\"竜:⿱立≈电\",\"⿱立电\"]\n    [\"覽:⿱⿰臣⿱罒見\",\"⿰臣,⿱罒,⿱罒見\"]\n    [\"龟:⿱𠂊≈电\",\"⿱𠂊电\"]\n    [\"𠗬:⿰冫⿸戶用\",\"⿰冫戶,⿸戶用\"]\n    [\"𠗭:(⿱⿰冫士寸)\",\"⿰冫,⿱士,⿱士寸\"]\n    [\"𠚖:⿶≈凵王\",\"⿶凵王\"]\n    [\"𠚜:⿶≈凵⿱爫臼\",\"⿶凵爫,⿱爫臼\"]\n    [\"𠚡:⿶?凵⿱爫臼\",\"⿶凵爫,⿱爫臼\"]\n    [\"繭:⿱卄⿻≈巾⿰糹虫\",\"⿱卄巾,⿻巾糹,⿰糹虫\"]\n    [\"𠕄:↻凹\",\"\"]\n    [\"孝:⿱耂子\",\"⿱耂子\"]\n    [\"猛:⿰犭⿱子皿\",\"⿰犭子,⿱子皿\"]\n    [\"孟:⿱子皿\",\"⿱子皿\"]\n    [\"勃:⿰⿱子力\",\"⿱子,⿰子力\"]\n    [\"郭:⿰(⿱亠口子)阝\",\"⿱亠口,⿱口子,⿰子阝\"]\n    ]\n  for [ probe, matcher, ] in probes_and_matchers\n    [ glyph, formula, ] = probe.split ':'\n    # debug '27821', IDLX.list_tokens formula, { all_brackets: yes, }\n    try\n      bigrams = IDLX.get_relational_bigrams_as_tokens formula\n      # urge  '93209', formula\n      # urge  '93209', bigrams\n      result  = conflate bigrams\n      # debug JSON.stringify [ probe, result, ]\n    catch error\n      T.fail \"#{probe} failed with #{rpr error.message}\"\n      continue\n    if result == matcher then T.ok true\n    else T.fail \"expected #{matcher}, got #{result}\"\n  T.end()\n\n\n\n"
  ]
}