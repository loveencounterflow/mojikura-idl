{
  "version": 3,
  "file": "idlx-ngrams.js",
  "sourceRoot": "../..",
  "sources": [
    "src/tests/idlx-ngrams.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'MOJIKURA-IDL/TESTS/NGRAMS'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nTAP                       = require 'tap'\n{ IDLX, }                 = require '../..'\n\n\n###\nNgrams with Relations:\n谆:⿰讠(⿱亠口子)\n谆∋⿰讠亠\n谆∋⿱亠口\n谆∋⿱口子\n(谆∋⿱亠...子)\n(谆∋⿰讠⿱亠)\n###\n\n#-----------------------------------------------------------------------------------------------------------\nconflate = ( bigrams ) ->\n  # bigrams.sort()\n  R = []\n  for bigram in bigrams\n    R.push ( token.s for token in bigram ).join ''\n  return R.join ','\n\n#-----------------------------------------------------------------------------------------------------------\nTAP.test \"(IDLX) bigrams\", ( T ) ->\n  ### !!!!!!!!!!!!!!!!!!!! ###\n  [ '䨻:⿱⿰⿱⻗田⿱⻗田⿰⿱⻗田⿱⻗田' ] ### TAINT not normalized? ###\n  [ '𩙡:⿱⿰⿵𠘨䖝⿵𠘨䖝⿰⿵𠘨䖝⿵𠘨䖝' ] ### TAINT not normalized? ###\n  ### !!!!!!!!!!!!!!!!!!!! ###\n  probes_and_matchers = [\n    [\"乳:⿰⿱爫子乚\",\"⿱⊚爫,⿱爫子,⿰子乚,⿰乚⊚\"]\n    [\"鐓:(⿰金(⿱亠口子)夊)\",\"⿰⊚金,⿰金亠,⿱亠口,⿱口子,⿰子夊,⿰夊⊚\"]\n    [\"孔:⿰子乚\",\"⿰⊚子,⿰子乚,⿰乚⊚\"]\n    [\"谆:⿰讠(⿱亠口子)\",\"⿰⊚讠,⿰讠亠,⿱亠口,⿱口子,⿱子⊚\"]\n    [\"享:(⿱亠口子)\",\"⿱⊚亠,⿱亠口,⿱口子,⿱子⊚\"]\n    [\"孫:⿰子系\",\"⿰⊚子,⿰子系,⿰系⊚\"]\n    [\"浮:⿰氵⿱爫子\",\"⿰⊚氵,⿰氵爫,⿱爫子,⿱子⊚\"]\n    [\"仔:⿰亻子\",\"⿰⊚亻,⿰亻子,⿰子⊚\"]\n    [\"郭:⿰(⿱亠口子)阝\",\"⿱⊚亠,⿱亠口,⿱口子,⿰子阝,⿰阝⊚\"]\n    [\"孙:⿰子小\",\"⿰⊚子,⿰子小,⿰小⊚\"]\n    [\"敦:⿰(⿱亠口子)夊\",\"⿱⊚亠,⿱亠口,⿱口子,⿰子夊,⿰夊⊚\"]\n    [\"孕:⿱乃子\",\"⿱⊚乃,⿱乃子,⿱子⊚\"]\n    [\"遜:⿺辶⿰子系\",\"⿺⊚辶,⿺辶子,⿰子系,⿰系⊚\"]\n    [\"鷻:(⿰鳥(⿱亠口子)夊)\",\"⿰⊚鳥,⿰鳥亠,⿱亠口,⿱口子,⿰子夊,⿰夊⊚\"]\n    [\"𤅸:⿰氵⿱⿰臣⿱𠂉⿴占𠂭皿\",\"⿰⊚氵,⿰氵臣,⿰臣𠂉,⿱𠂉占,⿴占𠂭,⿱𠂭皿,⿱皿⊚\"]\n    [\"𣟁:⿰木⿱⿰阝⿱⿸𠂇工⺝土\",\"⿰⊚木,⿰木阝,⿰阝𠂇,⿸𠂇工,⿱工⺝,⿱⺝土,⿱土⊚\"]\n    [\"𧃚:⿱卄⿰月⿺辶⿱⿸𠂇工⺝\",\"⿱⊚卄,⿱卄月,⿰月辶,⿺辶𠂇,⿸𠂇工,⿱工⺝,⿱⺝⊚\"]\n    [\"𥷿:⿱𥫗⿰⿱巛田⿸广⿱廿灬\",\"⿱⊚𥫗,⿱𥫗巛,⿱巛田,⿰田广,⿸广廿,⿱廿灬,⿱灬⊚\"]\n    [\"𤬣:⿱⿻⿴乂⿰⿱大亏瓜\",\"⿻⊚,⿻,⿴乂,⿱乂大,⿱大亏,⿰亏瓜,⿰瓜⊚\"]\n    [\"䨻:⿱⿰⿱⻗田⿱⻗田⿰⿱⻗田⿱⻗田\",\"⿱⊚⻗,⿱⻗田,⿰田⻗,⿱⻗田,⿱田⻗,⿱⻗田,⿰田⻗,⿱⻗田,⿱田⊚\"]\n    [\"𩙡:⿱⿰⿵𠘨䖝⿵𠘨䖝⿰⿵𠘨䖝⿵𠘨䖝\",\"⿵⊚𠘨,⿵𠘨䖝,⿰䖝𠘨,⿵𠘨䖝,⿱䖝𠘨,⿵𠘨䖝,⿰䖝𠘨,⿵𠘨䖝,⿵䖝⊚\"]\n    [\"竜:⿱立≈电\",\"⿱⊚立,⿱立电,⿱电⊚\"]\n    [\"覽:⿱⿰臣⿱罒見\",\"⿰⊚臣,⿰臣,⿱罒,⿱罒見,⿱見⊚\"]\n    [\"龟:⿱𠂊≈电\",\"⿱⊚𠂊,⿱𠂊电,⿱电⊚\"]\n    [\"𠗬:⿰冫⿸戶用\",\"⿰⊚冫,⿰冫戶,⿸戶用,⿸用⊚\"]\n    [\"𠗭:(⿱⿰冫士寸)\",\"⿰⊚冫,⿰冫,⿱士,⿱士寸,⿱寸⊚\"]\n    [\"𠚖:⿶≈凵王\",\"⿶⊚凵,⿶凵王,⿶王⊚\"]\n    [\"𠚜:⿶≈凵⿱爫臼\",\"⿶⊚凵,⿶凵爫,⿱爫臼,⿱臼⊚\"]\n    [\"𠚡:⿶?凵⿱爫臼\",\"⿶⊚凵,⿶凵爫,⿱爫臼,⿱臼⊚\"]\n    [\"繭:⿱卄⿻≈巾⿰糹虫\",\"⿱⊚卄,⿱卄巾,⿻巾糹,⿰糹虫,⿰虫⊚\"]\n    [\"𠕄:↻凹\",\"\"]\n    [\"孝:⿱耂子\",\"⿱⊚耂,⿱耂子,⿱子⊚\"]\n    [\"猛:⿰犭⿱子皿\",\"⿰⊚犭,⿰犭子,⿱子皿,⿱皿⊚\"]\n    [\"孟:⿱子皿\",\"⿱⊚子,⿱子皿,⿱皿⊚\"]\n    [\"勃:⿰⿱子力\",\"⿱⊚,⿱子,⿰子力,⿰力⊚\"]\n    [\"郭:⿰(⿱亠口子)阝\",\"⿱⊚亠,⿱亠口,⿱口子,⿰子阝,⿰阝⊚\"]\n    ]\n  for [ probe, matcher, ] in probes_and_matchers\n    [ glyph, formula, ] = probe.split ':'\n    # debug '27821', IDLX.list_tokens formula, { all_brackets: yes, }\n    try\n      bigrams = IDLX.get_relational_bigrams_as_tokens formula\n      # urge  '93209', formula\n      # urge  '93209', bigrams\n      result  = conflate bigrams\n      # debug JSON.stringify [ probe, result, ]\n    catch error\n      T.fail \"#{probe} failed with #{rpr error.message}\"\n      continue\n    if result == matcher then T.ok true\n    else T.fail \"expected #{matcher}, got #{result}\"\n  T.end()\n\n#-----------------------------------------------------------------------------------------------------------\nTAP.test \"(IDLX) cached bigrams with indices\", ( T ) ->\n  probes_and_matchers = [\n    [\"乳:⿰⿱爫子乚\",\"⿱⊚爫,⿱爫子,⿰子乚,⿰乚⊚\"]\n    [\"鐓:(⿰金(⿱亠口子)夊)\",\"⿰⊚金,⿰金亠,⿱亠口,⿱口子,⿰子夊,⿰夊⊚\"]\n    [\"孔:⿰子乚\",\"⿰⊚子,⿰子乚,⿰乚⊚\"]\n    [\"𠃨:⿹⺄&cdp#x88c6;\",\"⿹⊚⺄,⿹⺄&cdp#x88c6;,⿹&cdp#x88c6;⊚\"]\n    [\"𠄋:⿰(⿱&cdp#x855e;日丂)乞\",\"⿱⊚&cdp#x855e;,⿱&cdp#x855e;日,⿱日丂,⿰丂乞,⿰乞⊚\"]\n    [\"𠄋:⿰酉⿱日𤴓\",\"⿰⊚酉,⿰酉日,⿱日𤴓,⿱𤴓⊚\"]\n    ]\n  for [ probe, matcher, ] in probes_and_matchers\n    [ glyph, formula, ] = probe.split ':'\n    parts               = IDLX.split_formula formula\n    bigrams_as_indices  = IDLX.get_relational_bigrams_as_indices formula\n    bigrams             = IDLX.bigrams_from_parts_and_indices parts, bigrams_as_indices\n    result              = ( bigram.join '' for bigram in bigrams ).join ','\n    # urge  '93209', glyph, formula\n    # help  '93209', result\n    # debug '22020', JSON.stringify [ probe, result, ]\n    if result == matcher then T.ok true\n    else T.fail \"expected #{matcher}, got #{result}\"\n  T.end()\n\n#-----------------------------------------------------------------------------------------------------------\nTAP.test \"(IDLX) bigrams as lists of texts\", ( T ) ->\n  probes_and_matchers = [\n    [\"乳:⿰⿱爫子乚\",[\"⿱⊚爫\",\"⿱爫子\",\"⿰子乚\",\"⿰乚⊚\"]]\n    [\"鐓:(⿰金(⿱亠口子)夊)\",[\"⿰⊚金\",\"⿰金亠\",\"⿱亠口\",\"⿱口子\",\"⿰子夊\",\"⿰夊⊚\"]]\n    [\"孔:⿰子乚\",[\"⿰⊚子\",\"⿰子乚\",\"⿰乚⊚\"]]\n    [\"𠃨:⿹⺄&cdp#x88c6;\",[\"⿹⊚⺄\",\"⿹⺄&cdp#x88c6;\",\"⿹&cdp#x88c6;⊚\"]]\n    [\"𠄋:⿰(⿱&cdp#x855e;日丂)乞\",[\"⿱⊚&cdp#x855e;\",\"⿱&cdp#x855e;日\",\"⿱日丂\",\"⿰丂乞\",\"⿰乞⊚\"]]\n    [\"𠄋:⿰酉⿱日𤴓\",[\"⿰⊚酉\",\"⿰酉日\",\"⿱日𤴓\",\"⿱𤴓⊚\"]]\n    [\"𠕄:↻凹\",[]]\n    [\"孝:⿱耂子\",[\"⿱⊚耂\",\"⿱耂子\",\"⿱子⊚\"]]\n    ]\n  for [ probe, matcher, ] in probes_and_matchers\n    [ glyph, formula, ] = probe.split ':'\n    result              = IDLX.get_relational_bigrams formula\n    # debug '32321', JSON.stringify [ probe, result, ]\n    if ( CND.equals result, matcher ) then T.ok true\n    else T.fail \"expected #{matcher}, got #{result}\"\n  T.end()\n\n\n"
  ]
}