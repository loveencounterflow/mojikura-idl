// Generated by CoffeeScript 1.12.4
(function() {
  var CND, IDL, IDLX, TAP, alert, badge, debug, echo, help, info, log, nice_text_rpr, ref, resume_next, rpr, urge, warn, whisper;

  CND = require('cnd');

  rpr = CND.rpr;

  badge = 'MOJIKURA-IDL/tests';

  log = CND.get_logger('plain', badge);

  info = CND.get_logger('info', badge);

  whisper = CND.get_logger('whisper', badge);

  alert = CND.get_logger('alert', badge);

  debug = CND.get_logger('debug', badge);

  warn = CND.get_logger('warn', badge);

  help = CND.get_logger('help', badge);

  urge = CND.get_logger('urge', badge);

  echo = CND.echo.bind(CND);

  TAP = require('tap');

  ref = require('../..'), IDL = ref.IDL, IDLX = ref.IDLX;

  nice_text_rpr = function(text) {

    /* Ad-hoc method to print out text in a readable, CoffeeScript-compatible, triple-quoted way. Line breaks
    (`\\n`) will be shown as line breaks, so texts should not be as spaghettified as they appear with
    JSON.stringify (the last line break of a string is, however, always shown in its symbolic form so it
    won't get swallowed by the CoffeeScript parser). Code points below U+0020 (space) are shown as
    `\\x00`-style escapes, taken up less space than `\u0000` escapes while keeping things explicit. All
    double quotes will be prepended with a backslash.
     */
    var R;
    R = text;
    R = R.replace(/[\x00-\x09\x0b-\x19]/g, function($0) {
      var cid_hex;
      cid_hex = ($0.codePointAt(0)).toString(16);
      if (cid_hex.length === 1) {
        cid_hex = '0' + cid_hex;
      }
      return "\\x" + cid_hex;
    });
    R = R.replace(/"/g, '\\"');
    R = R.replace(/\n$/g, '\\n');
    R = '\n"""' + R + '"""';
    return R;
  };

  resume_next = function(T, method) {
    var R, error;
    try {
      R = method();
    } catch (error1) {
      error = error1;
      return Symbol("### ERROR ### " + error['message']);
    }
    return R;
  };

  TAP.test("(IDL) parse simple formulas", function(T) {
    var i, len, matcher, probe, probes_and_matchers, ref1, result;
    probes_and_matchers = [["⿲木木木", ["⿲", "木", "木", "木"]], ["⿱刀口", ["⿱", "刀", "口"]], ["⿱癶⿰弓貝", ["⿱", "癶", ["⿰", "弓", "貝"]]], ["⿱⿰亻式貝", ["⿱", ["⿰", "亻", "式"], "貝"]], ["⿱⿰亻式⿱目八", ["⿱", ["⿰", "亻", "式"], ["⿱", "目", "八"]]], ["⿺辶言", ["⿺", "辶", "言"]], ["⿰ab", ["⿰", "a", "b"]], ["⿰⿰abc", ["⿰", ["⿰", "a", "b"], "c"]], ["⿱⿱刀口乙", ["⿱", ["⿱", "刀", "口"], "乙"]], ["⿱⿱刀口乙", ["⿱", ["⿱", "刀", "口"], "乙"]], ["⿱&jzr#xe24a;&jzr#xe11d;", ["⿱", "&jzr#xe24a;", "&jzr#xe11d;"]], ["⿰𠁣𠃛", ["⿰", "𠁣", "𠃛"]]];
    for (i = 0, len = probes_and_matchers.length; i < len; i++) {
      ref1 = probes_and_matchers[i], probe = ref1[0], matcher = ref1[1];
      result = IDL.parse(probe);
      urge(CND.truth(CND.equals(result, matcher)), JSON.stringify([probe, result]));
      T.ok(CND.equals(result, matcher));
    }
    T.end();
    return null;
  });


  /*
  
  need tests for IDL.parse
  
  
  basic version should not use mingkwai-ncr; instead, use
  Steven Levithan's XRegExp to confine valid components to
  non-whitespace, non-meta codepoints
  
  allow meta codepoints as components when escaped?
  
  incorporate full set of JZR IDL operators
  
  IDL algebra
  
  collect operator, component statistics while building the tokentree
   */

}).call(this);

//# sourceMappingURL=basic.js.map
