{
  "version": 3,
  "file": "ngrams.js",
  "sourceRoot": "..",
  "sources": [
    "src/ngrams.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'KBM/MIXINS/IPC'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\n# { IDL, IDLX, }            = require '../../../mojikura-idl'\nlast_of                   = ( x ) -> x[ x.length - 1 ]\nassign                    = Object.assign\n\n#-----------------------------------------------------------------------------------------------------------\npluck = ( x, key, fallback ) ->\n  R = x[ key ]\n  R = fallback if R is undefined\n  delete x[ key ]\n  return R\n\n\n#-----------------------------------------------------------------------------------------------------------\n@get_relational_bigrams = ( diagram_or_formula ) ->\n  switch type = CND.type_of diagram_or_formula\n    when 'text' then diagram = @parse       diagram_or_formula\n    when 'list' then diagram =              diagram_or_formula\n    else throw new Error \"expected a text or a list, got a #{type} in #{rpr diagram_or_formula}\"\n  #.........................................................................................................\n  R = @_bigrams_from_diagram diagram, []\n  delete R.operators\n  delete R.last_component\n  delete R.last_operators\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@_bigrams_from_diagram = ( diagram, R ) ->\n  R.operators      ?= []\n  R.last_operators ?= []\n  # last_component  = null\n  #.........................................................................................................\n  for part, idx in diagram\n    if idx is 0\n      R.operators.push part\n      continue\n    #.......................................................................................................\n    if CND.isa_list part\n      @_bigrams_from_diagram part, R\n    #.......................................................................................................\n    else\n      if ( last_component = R.last_component )?\n        # whisper R.operators, idx\n        if idx is 1\n          operator = last_of R.last_operators\n        else\n          operator = last_of R.operators\n        #...................................................................................................\n        list  = [ operator, last_component, part, ]\n        text  = list.join ''\n        #...................................................................................................\n        R.push { text, list, }\n        #...................................................................................................\n      if idx is 1\n        R.last_operators.push last_of R.operators\n      R.last_component = part\n  #.........................................................................................................\n  R.operators.pop()\n  R.last_operators.pop()\n  return R\n\n\n#-----------------------------------------------------------------------------------------------------------\n@get_relational_bigrams_II = ( formula ) ->\n  # switch type = CND.type_of tokens_or_formula\n  #   when 'text' then tokens = @list_tokens tokens_or_formula\n  #   when 'list' then tokens =              tokens_or_formula\n  #   else throw new Error \"expected a text or a list, got a #{type} in #{rpr tokens_or_formula}\"\n  #.........................................................................................................\n  R = @_bigrams_from_diagram_II @list_tokens formula, { all_brackets: yes, }\n  # delete R.operators\n  # delete R.last_component\n  # delete R.last_operators\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@_bigrams_from_diagram_II = ( tokens ) ->\n  R             = []\n  operators     = []\n  prvs_token    = null\n  for this_token, i in tokens\n    this_token = assign {}, this_token, { i, }\n    switch this_token.t\n      when 'lbracket'\n        null\n      when 'rbracket'\n        operators.pop()\n        prvs_token.o = last_of operators\n      when 'binary_operator'\n        operators.push this_token\n      when 'component'\n        this_token.o = last_of operators\n        if prvs_token?\n          operator = pluck prvs_token, 'o'\n          R.push [ operator, prvs_token, this_token, ]\n        prvs_token = this_token\n      else\n        throw new Error \"unknown token type #{rpr this_token}\"\n  return R\n"
  ]
}