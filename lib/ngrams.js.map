{
  "version": 3,
  "file": "ngrams.js",
  "sourceRoot": "..",
  "sources": [
    "src/ngrams.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'KBM/MIXINS/IPC'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\n# { IDL, IDLX, }            = require '../../../mojikura-idl'\nfirst_of                  = ( x ) -> x[ 0 ]\nlast_of                   = ( x ) -> x[ x.length - 1 ]\nassign                    = Object.assign\n\n#-----------------------------------------------------------------------------------------------------------\npluck = ( x, key, fallback ) ->\n  R = x[ key ]\n  R = fallback if R is undefined\n  delete x[ key ]\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@get_relational_bigrams = ( formula ) ->\n  return ( ( token.s for token in bigram ).join '' for bigram in @get_relational_bigrams_as_tokens formula )\n\n#-----------------------------------------------------------------------------------------------------------\n@get_relational_bigrams_as_tokens = ( formula ) ->\n  tokens        = @list_tokens formula, { all_brackets: yes, }\n  R             = []\n  operators     = []\n  prvs_token    = null\n  # countdowns    = []\n  #.........................................................................................................\n  for this_token in tokens\n    this_token = assign {}, this_token\n    # debug '87900', rpr this_token\n    switch this_token.t\n      when 'lbracket'\n        null\n      when 'rbracket'\n        operators.pop()\n        prvs_token.o = last_of operators\n      when 'binary_operator'\n        operators.push this_token\n      when 'unary_operator'\n        operators.push this_token\n      when 'component', 'proxy'\n        this_token.o = last_of operators\n        if prvs_token?\n          operator = pluck prvs_token, 'o'\n          R.push [ operator, prvs_token, this_token, ]\n        prvs_token = this_token\n      else\n        throw new Error \"unknown token type #{rpr this_token}\"\n  #.........................................................................................................\n  if R.length > 0\n    delete ( last_of last_of R ).o\n    ### ⊚⊙⎉⏵⏺⏹⏸ ###\n    [ first_operator, first_element,  _,            ] = first_of R\n    [ last_operator,  _,              last_element, ] = last_of  R\n    start_token = { t: 'start', s: '⊚', i: null, }\n    stop_token  = { t: 'stop',  s: '⊚', i: null, }\n    R.unshift [ first_operator, start_token,  first_element,  ]\n    R.push    [ last_operator,  last_element, stop_token,     ]\n  #.........................................................................................................\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@get_relational_bigrams_as_indices = ( formula ) ->\n  return @_indices_from_bigram_tokens @get_relational_bigrams_as_tokens formula\n\n#-----------------------------------------------------------------------------------------------------------\n@_indices_from_bigram_tokens = ( bigrams ) ->\n  return ( ( token.i for token in bigram ) for bigram in bigrams )\n\n#-----------------------------------------------------------------------------------------------------------\n@split_formula = ( formula ) ->\n  return ( token.s for token in @list_tokens formula )\n\n#-----------------------------------------------------------------------------------------------------------\n@bigrams_from_formula_and_indices = ( formula, bigrams_as_indices ) ->\n  return @bigrams_from_parts_and_indices ( @split_formula formula ), bigrams_as_indices\n\n#-----------------------------------------------------------------------------------------------------------\n@bigrams_from_parts_and_indices = ( parts, bigrams_as_indices ) ->\n  return ( ( ( parts[ idx ] ? '⊚' ) for idx in bigram_indices ) for bigram_indices in bigrams_as_indices )\n\n\n\n\n\n\n\n"
  ]
}