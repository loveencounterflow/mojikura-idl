{
  "version": 3,
  "file": "ngrams.js",
  "sourceRoot": "..",
  "sources": [
    "src/ngrams.coffee"
  ],
  "names": [],
  "mappings": ";AAAA;EAAA;AAAA,MAAA;;EAGA,GAAA,GAA4B,OAAA,CAAQ,KAAR;;EAC5B,GAAA,GAA4B,GAAG,CAAC;;EAChC,KAAA,GAA4B;;EAC5B,KAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,OAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,OAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,SAAf,EAA4B,KAA5B,EAX5B;;;EAaA,OAAA,GAA4B,QAAA,CAAE,CAAF,CAAA;WAAS,CAAG,CAAA,CAAC,CAAC,MAAF,GAAW,CAAX;EAAZ;;EAC5B,MAAA,GAA4B,MAAM,CAAC,OAdnC;;;EAiBA,KAAA,GAAQ,QAAA,CAAE,CAAF,EAAK,GAAL,EAAU,QAAV,CAAA;AACN,QAAA;IAAA,CAAA,GAAI,CAAG,CAAA,GAAA;IACP,IAAgB,CAAA,KAAK,MAArB;MAAA,CAAA,GAAI,SAAJ;;IACA,OAAO,CAAG,CAAA,GAAA;AACV,WAAO;EAJD,EAjBR;;;;EAyBA,IAAC,CAAA,uBAAD,GAA2B,kBAzB3B;;;EA4BA,IAAC,CAAA,uBAAD,GAA2B,QAAA,CAAE,OAAF,CAAA;WAAe,OAAO,CAAC,OAAR,CAAgB,IAAC,CAAA,uBAAjB,EAA0C,EAA1C;EAAf,EA5B3B;;;EA+BA,IAAC,CAAA,gCAAD,GAAoC,QAAA,CAAE,OAAF,CAAA;AAClC,QAAA;IAAA,OAAA,GAAU,IAAC,CAAA,uBAAD,CAAyB,OAAzB;AACV;MACE,MAAA,GAAS,IAAC,CAAA,WAAD,CAAa,OAAb,EAAsB;QAAE,YAAA,EAAc;MAAhB,CAAtB,EADX;KAAA,cAAA;MAEM;MACJ,IAAG,KAAK,CAAC,OAAN,KAAiB,CAAA,2BAAA,CAAA,CAA8B,OAA9B,CAAsC,eAAtC,CAAA,CAAwD,OAAxD,CAAgE,GAAhE,CAApB;AACE,eAAO,GADT;;MAEA,MAAM,MALR;KADA;;IAQA,CAAA,GAAgB;IAChB,SAAA,GAAgB;IAChB,UAAA,GAAgB;IAChB,KAAA,gDAAA;;MACE,UAAA,GAAa,MAAA,CAAO,CAAA,CAAP,EAAW,UAAX,EAAuB,CAAE,CAAF,CAAvB;AACb,cAAO,UAAU,CAAC,CAAlB;AAAA,aACO,UADP;UAEI;AADG;AADP,aAGO,UAHP;UAII,SAAS,CAAC,GAAV,CAAA;UACA,UAAU,CAAC,CAAX,GAAe,OAAA,CAAQ,SAAR;AAFZ;AAHP,aAMO,iBANP;UAOI,SAAS,CAAC,IAAV,CAAe,UAAf;AADG;AANP,aAQO,WARP;UASI,UAAU,CAAC,CAAX,GAAe,OAAA,CAAQ,SAAR;UACf,IAAG,kBAAH;YACE,QAAA,GAAW,KAAA,CAAM,UAAN,EAAkB,GAAlB;YACX,CAAC,CAAC,IAAF,CAAO,CAAE,QAAF,EAAY,UAAZ,EAAwB,UAAxB,CAAP,EAFF;;UAGA,UAAA,GAAa;AALV;AARP;UAeI,MAAM,IAAI,KAAJ,CAAU,CAAA,mBAAA,CAAA,CAAsB,GAAA,CAAI,UAAJ,CAAtB,CAAA,CAAV;AAfV;IAFF;IAkBA,OAAO,CAAE,OAAA,CAAQ,OAAA,CAAQ,CAAR,CAAR,CAAF,CAAqB,CAAC;AAC7B,WAAO;EA/B2B;AA/BpC",
  "sourcesContent": [
    "\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'KBM/MIXINS/IPC'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\n# { IDL, IDLX, }            = require '../../../mojikura-idl'\nlast_of                   = ( x ) -> x[ x.length - 1 ]\nassign                    = Object.assign\n\n#-----------------------------------------------------------------------------------------------------------\npluck = ( x, key, fallback ) ->\n  R = x[ key ]\n  R = fallback if R is undefined\n  delete x[ key ]\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n### TAINT should be derived from options or grammar ###\n@_unary_operator_pattern = /≈|<|>|\\?|↻|↔|↕/g\n\n#-----------------------------------------------------------------------------------------------------------\n@_delete_unary_operators = ( formula ) -> formula.replace @_unary_operator_pattern, ''\n\n#-----------------------------------------------------------------------------------------------------------\n@get_relational_bigrams_as_tokens = ( formula ) ->\n  formula = @_delete_unary_operators formula\n  try\n    tokens = @list_tokens formula, { all_brackets: yes, }\n  catch error\n    if error.message is \"invalid syntax at index 0 (#{formula})\\nUnexpected \\\"#{formula}\\\"\\n\"\n      return []\n    throw error\n  #.........................................................................................................\n  R             = []\n  operators     = []\n  prvs_token    = null\n  for this_token, i in tokens\n    this_token = assign {}, this_token, { i, }\n    switch this_token.t\n      when 'lbracket'\n        null\n      when 'rbracket'\n        operators.pop()\n        prvs_token.o = last_of operators\n      when 'binary_operator'\n        operators.push this_token\n      when 'component'\n        this_token.o = last_of operators\n        if prvs_token?\n          operator = pluck prvs_token, 'o'\n          R.push [ operator, prvs_token, this_token, ]\n        prvs_token = this_token\n      else\n        throw new Error \"unknown token type #{rpr this_token}\"\n  delete ( last_of last_of R ).o\n  return R\n"
  ]
}