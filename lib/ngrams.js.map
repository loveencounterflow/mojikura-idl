{
  "version": 3,
  "file": "ngrams.js",
  "sourceRoot": "..",
  "sources": [
    "src/ngrams.coffee"
  ],
  "names": [],
  "mappings": ";AAAA;EAAA;AAAA,MAAA;;EAGA,GAAA,GAA4B,OAAA,CAAQ,KAAR;;EAC5B,GAAA,GAA4B,GAAG,CAAC;;EAChC,KAAA,GAA4B;;EAC5B,KAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,OAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,OAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,SAAf,EAA4B,KAA5B,EAX5B;;;EAaA,OAAA,GAA4B,QAAA,CAAE,CAAF,CAAA;WAAS,CAAG,CAAA,CAAC,CAAC,MAAF,GAAW,CAAX;EAAZ;;EAC5B,MAAA,GAA4B,MAAM,CAAC,OAdnC;;;EAiBA,KAAA,GAAQ,QAAA,CAAE,CAAF,EAAK,GAAL,EAAU,QAAV,CAAA;AACN,QAAA;IAAA,CAAA,GAAI,CAAG,CAAA,GAAA;IACP,IAAgB,CAAA,KAAK,MAArB;MAAA,CAAA,GAAI,SAAJ;;IACA,OAAO,CAAG,CAAA,GAAA;AACV,WAAO;EAJD,EAjBR;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAuDA,IAAC,CAAA,gCAAD,GAAoC,QAAA,CAAE,OAAF,CAAA;AAClC,QAAA;IAAA,MAAA,GAAgB,IAAC,CAAA,WAAD,CAAa,OAAb,EAAsB;MAAE,YAAA,EAAc;IAAhB,CAAtB;IAChB,CAAA,GAAgB;IAChB,SAAA,GAAgB;IAChB,UAAA,GAAgB,KAHhB;;;IAMA,KAAA,wCAAA;;MACE,UAAA,GAAa,MAAA,CAAO,CAAA,CAAP,EAAW,UAAX,EAAb;;AAEA,cAAO,UAAU,CAAC,CAAlB;AAAA,aACO,UADP;UAEI;AADG;AADP,aAGO,UAHP;UAII,SAAS,CAAC,GAAV,CAAA;UACA,UAAU,CAAC,CAAX,GAAe,OAAA,CAAQ,SAAR;AAFZ;AAHP,aAMO,iBANP;UAOI,SAAS,CAAC,IAAV,CAAe,UAAf;AADG;AANP,aAQO,gBARP;UASI,SAAS,CAAC,IAAV,CAAe,UAAf;AADG;AARP,aAUO,WAVP;UAWI,UAAU,CAAC,CAAX,GAAe,OAAA,CAAQ,SAAR;UACf,IAAG,kBAAH;YACE,QAAA,GAAW,KAAA,CAAM,UAAN,EAAkB,GAAlB;YACX,CAAC,CAAC,IAAF,CAAO,CAAE,QAAF,EAAY,UAAZ,EAAwB,UAAxB,CAAP,EAFF;;UAGA,UAAA,GAAa;AALV;AAVP;UAiBI,MAAM,IAAI,KAAJ,CAAU,CAAA,mBAAA,CAAA,CAAsB,GAAA,CAAI,UAAJ,CAAtB,CAAA,CAAV;AAjBV;IAHF;IAqBA,IAAG,CAAC,CAAC,MAAF,GAAW,CAAd;MACE,OAAO,CAAE,OAAA,CAAQ,OAAA,CAAQ,CAAR,CAAR,CAAF,CAAqB,CAAC,EAD/B;;AAEA,WAAO;EA9B2B;AAvDpC",
  "sourcesContent": [
    "\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'KBM/MIXINS/IPC'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\n# { IDL, IDLX, }            = require '../../../mojikura-idl'\nlast_of                   = ( x ) -> x[ x.length - 1 ]\nassign                    = Object.assign\n\n#-----------------------------------------------------------------------------------------------------------\npluck = ( x, key, fallback ) ->\n  R = x[ key ]\n  R = fallback if R is undefined\n  delete x[ key ]\n  return R\n\n# #-----------------------------------------------------------------------------------------------------------\n# @get_relational_bigrams_as_tokens = ( formula ) ->\n#   tokens        = @list_tokens formula, { all_brackets: yes, }\n#   R             = []\n#   operators     = []\n#   prvs_token    = null\n#   #.........................................................................................................\n#   for this_token, i in tokens\n#     this_token = assign {}, this_token, { i, }\n#     switch this_token.t\n#       when 'lbracket'\n#         null\n#       when 'rbracket'\n#         operators.pop()\n#         prvs_token.o = last_of operators\n#       when 'binary_operator'\n#         operators.push this_token\n#       when 'unary_operator'\n#         operators.push this_token\n#       when 'component'\n#         this_token.o = last_of operators\n#         if prvs_token?\n#           operator = pluck prvs_token, 'o'\n#           R.push [ operator, prvs_token, this_token, ]\n#         prvs_token = this_token\n#       else\n#         throw new Error \"unknown token type #{rpr this_token}\"\n#   if R.length > 0\n#     delete ( last_of last_of R ).o\n#   return R\n\n#-----------------------------------------------------------------------------------------------------------\n@get_relational_bigrams_as_tokens = ( formula ) ->\n  tokens        = @list_tokens formula, { all_brackets: yes, }\n  R             = []\n  operators     = []\n  prvs_token    = null\n  # countdowns    = []\n  #.........................................................................................................\n  for this_token in tokens\n    this_token = assign {}, this_token\n    # debug '87900', rpr this_token\n    switch this_token.t\n      when 'lbracket'\n        null\n      when 'rbracket'\n        operators.pop()\n        prvs_token.o = last_of operators\n      when 'binary_operator'\n        operators.push this_token\n      when 'unary_operator'\n        operators.push this_token\n      when 'component'\n        this_token.o = last_of operators\n        if prvs_token?\n          operator = pluck prvs_token, 'o'\n          R.push [ operator, prvs_token, this_token, ]\n        prvs_token = this_token\n      else\n        throw new Error \"unknown token type #{rpr this_token}\"\n  if R.length > 0\n    delete ( last_of last_of R ).o\n  return R\n"
  ]
}