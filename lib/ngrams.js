// Generated by CoffeeScript 2.0.1
(function() {
  //###########################################################################################################
  var CND, assign, badge, debug, help, info, last_of, pluck, rpr, urge, warn, whisper;

  CND = require('cnd');

  rpr = CND.rpr;

  badge = 'KBM/MIXINS/IPC';

  debug = CND.get_logger('debug', badge);

  warn = CND.get_logger('warn', badge);

  help = CND.get_logger('help', badge);

  urge = CND.get_logger('urge', badge);

  info = CND.get_logger('info', badge);

  whisper = CND.get_logger('whisper', badge);

  // { IDL, IDLX, }            = require '../../../mojikura-idl'
  last_of = function(x) {
    return x[x.length - 1];
  };

  assign = Object.assign;

  //-----------------------------------------------------------------------------------------------------------
  pluck = function(x, key, fallback) {
    var R;
    R = x[key];
    if (R === void 0) {
      R = fallback;
    }
    delete x[key];
    return R;
  };

  //-----------------------------------------------------------------------------------------------------------
  this.get_relational_bigrams = function(diagram_or_formula) {
    var R, diagram, type;
    switch (type = CND.type_of(diagram_or_formula)) {
      case 'text':
        diagram = this.parse(diagram_or_formula);
        break;
      case 'list':
        diagram = diagram_or_formula;
        break;
      default:
        throw new Error(`expected a text or a list, got a ${type} in ${rpr(diagram_or_formula)}`);
    }
    //.........................................................................................................
    R = this._bigrams_from_diagram(diagram, []);
    delete R.operators;
    delete R.last_component;
    delete R.last_operators;
    return R;
  };

  //-----------------------------------------------------------------------------------------------------------
  this._bigrams_from_diagram = function(diagram, R) {
    var idx, j, last_component, len, list, operator, part, text;
    if (R.operators == null) {
      R.operators = [];
    }
    if (R.last_operators == null) {
      R.last_operators = [];
    }
    // last_component  = null
    //.........................................................................................................
    for (idx = j = 0, len = diagram.length; j < len; idx = ++j) {
      part = diagram[idx];
      if (idx === 0) {
        R.operators.push(part);
        continue;
      }
      //.......................................................................................................
      if (CND.isa_list(part)) {
        this._bigrams_from_diagram(part, R);
      } else {
        if ((last_component = R.last_component) != null) {
          // whisper R.operators, idx
          if (idx === 1) {
            operator = last_of(R.last_operators);
          } else {
            operator = last_of(R.operators);
          }
          //...................................................................................................
          list = [operator, last_component, part];
          text = list.join('');
          //...................................................................................................
          R.push({text, list});
        }
        //...................................................................................................
        if (idx === 1) {
          R.last_operators.push(last_of(R.operators));
        }
        R.last_component = part;
      }
    }
    //.........................................................................................................
    R.operators.pop();
    R.last_operators.pop();
    return R;
  };

  //-----------------------------------------------------------------------------------------------------------
  this.get_relational_bigrams_II = function(formula) {
    var R;
    // switch type = CND.type_of tokens_or_formula
    //   when 'text' then tokens = @list_tokens tokens_or_formula
    //   when 'list' then tokens =              tokens_or_formula
    //   else throw new Error "expected a text or a list, got a #{type} in #{rpr tokens_or_formula}"
    //.........................................................................................................
    R = this._bigrams_from_diagram_II(this.list_tokens(formula, {
      all_brackets: true
    }));
    // delete R.operators
    // delete R.last_component
    // delete R.last_operators
    return R;
  };

  //-----------------------------------------------------------------------------------------------------------
  this._bigrams_from_diagram_II = function(tokens) {
    var R, i, j, len, operator, operators, prvs_token, this_token;
    R = [];
    operators = [];
    prvs_token = null;
    for (i = j = 0, len = tokens.length; j < len; i = ++j) {
      this_token = tokens[i];
      this_token = assign({}, this_token, {i});
      switch (this_token.t) {
        case 'lbracket':
          null;
          break;
        case 'rbracket':
          operators.pop();
          prvs_token.o = last_of(operators);
          break;
        case 'binary_operator':
          operators.push(this_token);
          break;
        case 'component':
          this_token.o = last_of(operators);
          if (prvs_token != null) {
            operator = pluck(prvs_token, 'o');
            R.push([operator, prvs_token, this_token]);
          }
          prvs_token = this_token;
          break;
        default:
          throw new Error(`unknown token type ${rpr(this_token)}`);
      }
    }
    return R;
  };

}).call(this);

//# sourceMappingURL=ngrams.js.map
