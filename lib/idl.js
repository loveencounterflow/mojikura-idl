// Generated by CoffeeScript 1.10.0
(function() {
  var CND, MKNCR, O, alert, badge, debug, echo, help, info, log, rpr, urge, warn, whisper,
    slice = [].slice,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  CND = require('cnd');

  rpr = CND.rpr;

  badge = 'MOJIKURA-IDL/IDL';

  log = CND.get_logger('plain', badge);

  info = CND.get_logger('info', badge);

  whisper = CND.get_logger('whisper', badge);

  alert = CND.get_logger('alert', badge);

  debug = CND.get_logger('debug', badge);

  warn = CND.get_logger('warn', badge);

  help = CND.get_logger('help', badge);

  urge = CND.get_logger('urge', badge);

  echo = CND.echo.bind(CND);

  MKNCR = require('mingkwai-ncr');

  O = require('./options');

  this.grammar = O.idl;

  this._new_parse = function(source) {
    var R;
    R = {
      '~isa': 'MOJIKURA-IDL/parse',
      source: source,
      stack: [],
      idx: 0
    };
    R.tokens = this._tokenize(R, source);
    return R;
  };

  this.tokenize = function(source) {
    return (this._new_parse(source)).tokens;
  };

  this._tokenize = function(me, source) {
    var R, chrs, cu_idx, i, len, symbol;
    R = [];
    R = this._new_token_list(me);
    chrs = MKNCR.chrs_from_text(source);
    cu_idx = 0;
    for (i = 0, len = chrs.length; i < len; i++) {
      symbol = chrs[i];
      R.push(this._new_token(me, symbol, cu_idx));

      /* we're counting JS code units here */
      cu_idx += symbol.length;
    }
    return R;
  };

  this._new_token_list = function(me) {
    var R;
    R = [];
    R.inspect = function() {
      var P, element, kernel;
      P = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      kernel = ((function() {
        var i, len, results;
        results = [];
        for (i = 0, len = R.length; i < len; i++) {
          element = R[i];
          results.push(rpr(element));
        }
        return results;
      })()).join('');
      return CND.white("[ " + kernel + " ]");
    };
    return R;
  };

  this._new_token = function(me, symbol, cu_idx) {
    var R, operator, type;
    type = this._type_of_symbol(me, symbol);

    /* `t` for 'type' */
    R = {
      '~isa': 'MOJIKURA-IDL/token',
      s: symbol,
      idx: cu_idx,
      t: type
    };
    switch (type) {
      case 'operator':
        operator = this._operator_from_symbol(me, symbol);
        R.a = operator.arity;
        R.n = operator.name;
    }
    R.inspect = function() {
      var P;
      P = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      if (R.error != null) {
        return CND.red(" ✘ " + R.s + " ✘ ");
      }
      return CND.white("" + R.s);
    };
    return R;
  };

  this._isa_token = function(x) {
    return CND.isa(x, 'MOJIKURA-IDL/token');
  };

  this._operator_from_symbol = function(me, symbol) {
    var R;
    if ((R = this.grammar.operators[symbol]) == null) {
      throw new Error("unknown operator " + (rpr(symbol)));
    }
    return R;
  };

  this._describe_symbol = function(me, symbol) {
    return MKNCR.describe(symbol);
  };

  this._tags_from_symbol = function(me, symbol) {
    var ref;
    return (ref = (this._describe_symbol(me, symbol)).tag) != null ? ref : [];
  };

  this._symbol_is_operator = function(me, symbol) {
    return symbol in this.grammar.operators;
  };

  this._symbol_is_component = function(me, symbol) {
    return indexOf.call(this._tags_from_symbol(me, symbol), 'cjk') >= 0;
  };

  this._type_of_symbol = function(me, symbol) {
    if (this._symbol_is_operator(me, symbol)) {
      return 'operator';
    }
    if (this._symbol_is_component(me, symbol)) {
      return 'component';
    }
    return 'other';
  };

  this.parse = function(source) {
    return this._parse(this.parse_tree(source));
  };

  this._parse = function(element) {
    var token;
    if (this._isa_token(element)) {
      return element.s;
    }
    return (function() {
      var i, len, results;
      results = [];
      for (i = 0, len = element.length; i < len; i++) {
        token = element[i];
        results.push(this._parse(token));
      }
      return results;
    }).call(this);
  };

  this._mark_token = function(me, idx) {
    var offending_token;
    if (idx == null) {
      idx = null;
    }
    if (idx == null) {
      idx = me.idx;
    }
    if ((offending_token = me.tokens[idx]) != null) {
      offending_token.error = true;
    }
    return null;
  };

  this.parse_tree = function(source) {
    var R, me, ref, type;
    if ((type = CND.type_of(source)) !== 'text') {
      throw new Error("expected a text, got a " + type);
    }
    if (!(source.length > 0)) {
      throw new Error("syntax error (empty text)");
    }
    me = this._new_parse(source);
    R = this._parse_tree(me);
    if (me.idx !== me.tokens.length) {
      this._mark_token(me);
      throw new Error("syntax error: extra token(s) in " + (rpr(me.tokens)));
    }
    if ((me.tokens.length === 1) && ((ref = (type = me.tokens[0].t)) === 'other' || ref === 'component')) {
      this._mark_token(me, 0);
      throw new Error("syntax error: lone token of type " + (rpr(type)) + " in " + (rpr(me.tokens)));
    }
    return R;
  };

  this._parse_tree = function(me, R) {
    var arity, count, i, ref, target, token, type;
    if (R == null) {
      R = null;
    }
    token = me.tokens[me.idx];
    if (token == null) {
      this._mark_token(me, me.idx - 1);
      throw new Error("syntax error: premature end of source in " + (rpr(me.tokens)) + ")");
    }
    me.idx += +1;
    target = null;
    arity = null;
    switch (type = token.t) {
      case 'operator':
        arity = token.a;
        target = [token];
        for (count = i = 1, ref = arity; i <= ref; count = i += +1) {
          this._parse_tree(me, target);
        }
        if (R != null) {
          R.push(target);
        } else {
          R = target;
        }
        break;
      case 'component':
        if (R != null) {
          R.push(token);
        } else {
          R = token;
        }
        break;
      default:
        this._mark_token(me);
        throw new Error("syntax error: illegal token (type " + (rpr(type)) + ") in " + (rpr(me.tokens)));
    }
    return R;
  };

}).call(this);

//# sourceMappingURL=idl.js.map
