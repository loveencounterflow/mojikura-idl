// Generated by CoffeeScript 1.12.1
(function() {
  var CND, MKNCR, O, alert, badge, debug, echo, help, info, log, rpr, urge, warn, whisper,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  CND = require('cnd');

  rpr = CND.rpr;

  badge = 'MOJIKURA-IDL/IDL';

  log = CND.get_logger('plain', badge);

  info = CND.get_logger('info', badge);

  whisper = CND.get_logger('whisper', badge);

  alert = CND.get_logger('alert', badge);

  debug = CND.get_logger('debug', badge);

  warn = CND.get_logger('warn', badge);

  help = CND.get_logger('help', badge);

  urge = CND.get_logger('urge', badge);

  echo = CND.echo.bind(CND);

  MKNCR = require('mingkwai-ncr');

  O = require('./options');


  /* Parser settings contain lists of operators with symbolic names, arity and so on. */

  this._parser_settings = O.idl;

  this._new_ctx = function(source) {

    /* A context contains the state of the current parsing process. At first, only the `source` property is
    set, then—explicitly by calling a dedicated method or implicitly by calling a dependent method—the
    `tokenlist`, `tokentree` and `diagram` properties are set. In theory, it's possible to intervene e.g.
    after tokenization and correct one or more properties of the context so as to affect the resulting
    diagram.
     */
    var R, type;
    if ((type = CND.type_of(source)) !== 'text') {
      throw new Error("expected a text, got a " + type);
    }
    if (!(source.length > 0)) {
      throw new Error("IDL: empty text");
    }
    R = {
      '~isa': 'MOJIKURA-IDL/ctx',
      source: source,
      idx: 0,
      settings: this._parser_settings,
      tokenlist: null,
      tokentree: null,
      diagram: null,
      formula_uchr: null,
      formula_xncr: null,
      sexpr_uchr: null,
      sexpr_xncr: null
    };
    R.settings.sexpr = O.sexpr;
    return R;
  };

  this._get_tokenlist = function(me) {
    var R, chrs, i, idx, len, lexeme;
    if ((R = me.tokenlist) != null) {
      return R;
    }
    R = [];

    /* PLAIN-IDL
    chrs      = Array.from me.source
     */
    chrs = MKNCR.chrs_from_text(me.source);
    for (idx = i = 0, len = chrs.length; i < len; idx = ++i) {
      lexeme = chrs[idx];
      R.push(this._new_token(me, lexeme, idx));
    }
    return me.tokenlist = R;
  };

  this._get_tokentree = function(me) {
    var R, ref, type;
    if ((R = me.tokentree) != null) {
      return R;
    }
    this._get_tokenlist(me);
    R = this._build_tokentree(me);
    if (me.idx !== me.tokenlist.length) {
      this._err(me, me.idx, "IDL: extra token(s)");
    }

    /* TAINT review the below condition */
    if ((me.tokenlist.length === 1) && ((ref = (type = me.tokenlist[0].t)) === 'other' || ref === 'component')) {
      this._err(me, 0, "IDL: lone token of type " + (rpr(type)));
    }
    return me.tokentree = R;
  };

  this._get_diagram = function(me) {
    var R;
    if ((R = me.diagram) != null) {
      return R;
    }
    this._get_tokentree(me);
    return me.diagram = this._diagram_from_tokentree(me, me.tokentree);
  };

  this._get_formula = function(me, jzr_mode) {
    var R;
    switch (jzr_mode) {
      case 'uchr':
        if ((R = me.formula_uchr) != null) {
          return R;
        }
        return me.formula_uchr = this._tokentree_as_formula(me, this._get_tokentree(me), jzr_mode);
      case 'xncr':
        if ((R = me.formula_xncr) != null) {
          return R;
        }
        return me.formula_xncr = this._tokentree_as_formula(me, this._get_tokentree(me), jzr_mode);
      default:
        throw new Error("expected 'uchr' or 'xncr' for JZR mode, got " + (rpr(jzr_mode)));
    }
    return null;
  };

  this._get_sexpr = function(me, jzr_mode) {
    var R;
    switch (jzr_mode) {
      case 'uchr':
        if ((R = me.sexpr_uchr) != null) {
          return R;
        }
        return me.sexpr_uchr = this._tokentree_as_sexpr(me, this._get_tokentree(me), jzr_mode);
      case 'xncr':
        if ((R = me.sexpr_xncr) != null) {
          return R;
        }
        return me.sexpr_xncr = this._tokentree_as_sexpr(me, this._get_tokentree(me), jzr_mode);
      default:
        throw new Error("expected 'uchr' or 'xncr' for JZR mode, got " + (rpr(jzr_mode)));
    }
    return null;
  };

  this._new_token = function(me, lexeme, idx) {
    var R, operator, type;
    type = this._type_of_lexeme(me, lexeme);

    /* PLAIN-IDL
    null
     */
    lexeme = MKNCR.jzr_as_uchr(lexeme);

    /* `t` for 'type' */
    R = {
      '~isa': 'MOJIKURA-IDL/token',
      s: lexeme,
      idx: idx,
      t: type
    };
    switch (type) {
      case 'operator':
        operator = this._operator_from_lexeme(me, lexeme);
        R.a = operator.arity;
        R.n = operator.name;
    }
    return R;
  };

  this._isa_token = function(me, x) {
    return CND.isa(x, 'MOJIKURA-IDL/token');
  };

  this._operator_from_lexeme = function(me, lexeme) {
    var R;
    if ((R = me.settings.operators[lexeme]) == null) {
      throw new Error("unknown operator " + (rpr(lexeme)));
    }
    return R;
  };

  this._lexeme_is_operator = function(me, lexeme) {
    return lexeme in me.settings.operators;
  };


  /* PLAIN-IDL
  @_lexeme_is_component   = ( me, lexeme ) -> not @_lexeme_is_operator me, lexeme
   */

  this._describe_lexeme = function(me, lexeme) {
    return MKNCR.describe(lexeme);
  };

  this._tags_from_lexeme = function(me, lexeme) {
    var ref;
    return (ref = (this._describe_lexeme(me, lexeme)).tag) != null ? ref : [];
  };

  this._lexeme_is_component = function(me, lexeme) {
    return indexOf.call(this._tags_from_lexeme(me, lexeme), 'cjk') >= 0;
  };

  this._type_of_lexeme = function(me, lexeme) {
    if (this._lexeme_is_operator(me, lexeme)) {
      return 'operator';
    }
    if (this._lexeme_is_component(me, lexeme)) {
      return 'component';
    }

    /* PLAIN-IDL
    return 'component'
     */
    return 'other';
  };

  this._diagram_from_tokentree = function(me, tokentree) {

    /* A 'diagram' is a 'lexeme tree', i.e. the simplified version of a token tree, minus all the
    additional data, leaving just nested lists of lexemes.
     */
    var token;
    if (this._isa_token(null, tokentree)) {
      return tokentree.s;
    }
    return (function() {
      var i, len, results;
      results = [];
      for (i = 0, len = tokentree.length; i < len; i++) {
        token = tokentree[i];
        results.push(this._diagram_from_tokentree(me, token));
      }
      return results;
    }).call(this);
  };

  this._build_tokentree = function(me, R) {
    var arity, count, i, ref, target, token, type;
    if (R == null) {
      R = null;
    }
    token = me.tokenlist[me.idx];
    if (token == null) {
      this._err(me, me.idx - 1, "IDL: premature end of source");
    }
    me.idx += +1;
    target = null;
    arity = null;
    switch (type = token.t) {
      case 'operator':
        arity = token.a;
        target = [token];
        for (count = i = 1, ref = arity; i <= ref; count = i += +1) {
          this._build_tokentree(me, target);
        }
        if (R != null) {
          R.push(target);
        } else {
          R = target;
        }
        break;
      case 'component':
        if (R != null) {
          R.push(token);
        } else {
          R = token;
        }
        break;
      default:
        this._err(me, me.idx - 1, "IDL: illegal token " + (rpr(token.s)) + " (type " + (rpr(type)) + ")");
    }
    return R;
  };

  this._token_as_text = function(me, token, jzr_mode) {

    /* TAINT this is highly application-specific and shouldn't be here */

    /* TAINT make output format configurable */

    /* PLAIN-IDL
    return token.s
     */
    switch (jzr_mode) {
      case 'uchr':
        return MKNCR.jzr_as_uchr(token.s);
      case 'xncr':
        return MKNCR.jzr_as_xncr(token.s);
      default:
        throw new Error("expected 'uchr' or 'xncr' for JZR mode, got " + (rpr(jzr_mode)));
    }
    return null;
  };

  this._tokentree_as_formula = function(me, tokentree, jzr_mode) {
    var R, element, has_brackets, i, len;
    if (this._isa_token(me, tokentree)) {
      return this._token_as_text(me, tokentree, jzr_mode);
    }
    R = [];
    has_brackets = tokentree[0].a !== tokentree.length - 1;
    for (i = 0, len = tokentree.length; i < len; i++) {
      element = tokentree[i];
      if (this._isa_token(me, element)) {
        R.push(this._token_as_text(me, element, jzr_mode));
      } else {
        R.push(this._tokentree_as_formula(me, element, jzr_mode));
      }
    }
    if (has_brackets) {
      return '(' + (R.join('')) + ')';
    }
    return R.join('');
  };

  this._tokentree_as_sexpr = function(me, tokentree, jzr_mode, level) {
    var R, element, i, left, len, mid, right;
    if (level == null) {
      level = 0;
    }
    mid = me.settings.sexpr.spacer;
    left = me.settings.sexpr.opener + mid;
    right = mid + me.settings.sexpr.closer;
    if (this._isa_token(me, tokentree)) {
      R = this._token_as_text(me, tokentree, jzr_mode);
      if (level === 0) {
        R = left + R + right;
      }
      return R;
    }
    R = [];
    for (i = 0, len = tokentree.length; i < len; i++) {
      element = tokentree[i];
      if (this._isa_token(me, element)) {
        R.push(this._token_as_text(me, element, jzr_mode));
      } else {
        R.push(this._tokentree_as_sexpr(me, element, jzr_mode, level + 1));
      }
    }
    return left + (R.join(mid)) + right;
  };

  this._tokenlist_as_text = function(me, error_idx) {
    var R, i, idx, len, ref, token;
    if (error_idx == null) {
      error_idx = null;
    }
    if (error_idx == null) {
      error_idx = me.idx;
    }
    R = [];
    ref = me.tokenlist;
    for (idx = i = 0, len = ref.length; i < len; idx = ++i) {
      token = ref[idx];
      R.push(idx === error_idx ? CND.red(" ✘ " + token.s + " ✘ ") : CND.white("" + token.s));
    }
    return CND.white("[ " + (R.join('')) + " ]");
  };

  this._err = function(me, idx, message) {

    /* Format error message with colors and token hiliting. */
    var tokenlist_txt;
    tokenlist_txt = this._tokenlist_as_text(me, idx);
    throw new Error(message + " " + tokenlist_txt);
  };

  this.tokenlist_from_source = function(source) {
    return this._get_tokenlist(this._new_ctx(source));
  };

  this.tokentree_from_source = function(source) {
    return this._get_tokentree(this._new_ctx(source));
  };

  this.diagram_from_source = function(source) {
    return this._get_diagram(this._new_ctx(source));
  };

  this.formula_from_source = function(source, jzr_mode) {
    return this._get_formula(this._new_ctx(source), jzr_mode);
  };

  this.sexpr_from_source = function(source, jzr_mode) {
    return this._get_sexpr(this._new_ctx(source), jzr_mode);
  };

  this.parse = function(source) {
    var R;
    R = this._new_ctx(source);
    this._get_diagram(R);
    return R;
  };

}).call(this);

//# sourceMappingURL=idl.js.map
